{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nvar SelectFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    choices = props.choices,\n    _a = props.optionValue,\n    optionValue = _a === void 0 ? 'id' : _a,\n    _b = props.optionText,\n    optionText = _b === void 0 ? 'name' : _b,\n    _c = props.translateChoice,\n    translateChoice = _c === void 0 ? true : _c,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var _d = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _d.getChoiceText,\n    getChoiceValue = _d.getChoiceValue;\n  var translate = useTranslate();\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n};\nSelectFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectFieldImpl.displayName = 'SelectFieldImpl';\nexport var SelectField = genericMemo(SelectFieldImpl);","map":{"version":3,"names":["React","PropTypes","get","useChoices","useRecordContext","useTranslate","Typography","sanitizeFieldRestProps","fieldPropTypes","genericMemo","SelectFieldImpl","props","className","emptyText","source","choices","_a","optionValue","_b","optionText","_c","translateChoice","rest","__rest","record","value","_d","getChoiceText","getChoiceValue","translate","choice","find","createElement","__assign","component","variant","_","choiceText","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","displayName","SelectField"],"sources":["../../../src/field/SelectField.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}