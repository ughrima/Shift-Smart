{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useEvent } from '../util';\nimport { useStoreContext } from './useStoreContext';\n/**\n * Read and write a value from the Store\n *\n * useState-like hook using the global Store for persistence.\n * Each time a store value is changed, all components using this value will be re-rendered.\n *\n * @param {string} key Name of the store key. Separate with dots to namespace, e.g. 'posts.list.columns'.\n * @param {any} defaultValue Default value\n *\n * @return {Object} A value and a setter for the value, in an array - just like for useState()\n *\n * @example\n * import { useStore } from 'react-admin';\n *\n * const PostList = () => {\n *     const [density] = useStore('posts.list.density', 'small');\n *\n *     return (\n *         <List>\n *             <Datagrid size={density}>\n *                 ...\n *             </Datagrid>\n *         </List>\n *     );\n * }\n *\n * // Clicking on this button will trigger a rerender of the PostList!\n * const ChangeDensity: FC<any> = () => {\n *     const [density, setDensity] = useStore('posts.list.density', 'small');\n *\n *     const changeDensity = (): void => {\n *         setDensity(density === 'small' ? 'medium' : 'small');\n *     };\n *\n *     return (\n *         <Button onClick={changeDensity}>\n *             {`Change density (current ${density})`}\n *         </Button>\n *     );\n * };\n */\nexport var useStore = function (key, defaultValue) {\n  var _a = useStoreContext(),\n    getItem = _a.getItem,\n    setItem = _a.setItem,\n    subscribe = _a.subscribe;\n  var _b = useState(function () {\n      return getItem(key, defaultValue);\n    }),\n    value = _b[0],\n    setValue = _b[1];\n  // subscribe to changes on this key, and change the state when they happen\n  useEffect(function () {\n    var storedValue = getItem(key, defaultValue);\n    if (!isEqual(value, storedValue)) {\n      setValue(storedValue);\n    }\n    var unsubscribe = subscribe(key, function (newValue) {\n      setValue(typeof newValue === 'undefined' ? defaultValue : newValue);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, [key, subscribe, defaultValue, getItem, value]);\n  var set = useEvent(function (valueParam, runtimeDefaultValue) {\n    var newValue = typeof valueParam === 'function' ? valueParam(value) : valueParam;\n    // we only set the value in the Store;\n    // the value in the local state will be updated\n    // by the useEffect during the next render\n    setItem(key, typeof newValue === 'undefined' ? typeof runtimeDefaultValue === 'undefined' ? defaultValue : runtimeDefaultValue : newValue);\n  });\n  return [value, set];\n};","map":{"version":3,"names":["useState","useEffect","isEqual","useEvent","useStoreContext","useStore","key","defaultValue","_a","getItem","setItem","subscribe","_b","value","setValue","storedValue","unsubscribe","newValue","set","valueParam","runtimeDefaultValue"],"sources":["../../../src/store/useStore.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAO,IAAMC,QAAQ,GAAG,SAAAA,CACpBC,GAAW,EACXC,YAAgB;EAEV,IAAAC,EAAA,GAAkCJ,eAAe,EAAE;IAAjDK,OAAO,GAAAD,EAAA,CAAAC,OAAA;IAAEC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAsB;EACnD,IAAAC,EAAA,GAAoBZ,QAAQ,CAAC;MAAM,OAAAS,OAAO,CAACH,GAAG,EAAEC,YAAY,CAAC;IAA1B,CAA0B,CAAC;IAA7DM,KAAK,GAAAD,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAA8C;EAEpE;EACAX,SAAS,CAAC;IACN,IAAMc,WAAW,GAAGN,OAAO,CAACH,GAAG,EAAEC,YAAY,CAAC;IAC9C,IAAI,CAACL,OAAO,CAACW,KAAK,EAAEE,WAAW,CAAC,EAAE;MAC9BD,QAAQ,CAACC,WAAW,CAAC;;IAEzB,IAAMC,WAAW,GAAGL,SAAS,CAACL,GAAG,EAAE,UAAAW,QAAQ;MACvCH,QAAQ,CAAC,OAAOG,QAAQ,KAAK,WAAW,GAAGV,YAAY,GAAGU,QAAQ,CAAC;IACvE,CAAC,CAAC;IACF,OAAO;MAAM,OAAAD,WAAW,EAAE;IAAb,CAAa;EAC9B,CAAC,EAAE,CAACV,GAAG,EAAEK,SAAS,EAAEJ,YAAY,EAAEE,OAAO,EAAEI,KAAK,CAAC,CAAC;EAElD,IAAMK,GAAG,GAAGf,QAAQ,CAAC,UAACgB,UAAa,EAAEC,mBAAsB;IACvD,IAAMH,QAAQ,GACV,OAAOE,UAAU,KAAK,UAAU,GAAGA,UAAU,CAACN,KAAK,CAAC,GAAGM,UAAU;IACrE;IACA;IACA;IACAT,OAAO,CACHJ,GAAG,EACH,OAAOW,QAAQ,KAAK,WAAW,GACzB,OAAOG,mBAAmB,KAAK,WAAW,GACtCb,YAAY,GACZa,mBAAmB,GACvBH,QAAQ,CACjB;EACL,CAAC,CAAC;EACF,OAAO,CAACJ,KAAK,EAAEK,GAAG,CAAC;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}