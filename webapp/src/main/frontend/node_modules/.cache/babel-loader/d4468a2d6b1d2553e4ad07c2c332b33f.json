{"ast":null,"code":"import{fetchUtils}from'ra-core';/**\n * Maps react-admin queries to a simple REST API\n *\n * This REST dialect is similar to the one of FakeRest\n *\n * @see https://github.com/marmelab/FakeRest\n *\n * @example\n *\n * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * getOne      => GET http://my.api.url/posts/123\n * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}\n * update      => PUT http://my.api.url/posts/123\n * create      => POST http://my.api.url/posts\n * delete      => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import simpleRestProvider from 'ra-data-simple-rest';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */export default(function(apiUrl){let httpClient=arguments.length>1&&arguments[1]!==undefined?arguments[1]:fetchUtils.fetchJson;let countHeader=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'Content-Range';return{getList:(resource,params)=>{const{page,perPage}=params.pagination;const{field,order}=params.sort;const filter=params.filter;let query={sortBy:field,sortDir:order,page:page-1,limit:perPage};if(Object.keys(filter).length>0)query[\"filters\"]=filter;return httpClient(`${apiUrl}/${resource}/list`,{method:'POST',body:JSON.stringify(query)}).then(_ref=>{let{headers,json}=_ref;return{data:json.data,total:json.count};});},getOne:(resource,params)=>httpClient(`${apiUrl}/${resource}/${params.id}`).then(_ref2=>{let{json}=_ref2;return{data:json};}),getMany:(resource,params)=>{const query={filters:{\"id\":{\"in\":params.ids}}};return httpClient(`${apiUrl}/${resource}/list`,{method:'POST',body:JSON.stringify(query)}).then(_ref3=>{let{headers,json}=_ref3;return{data:json.data,total:json.count};});},getManyReference:(resource,params)=>{const{page,perPage}=params.pagination;const{field,order}=params.sort;const filter=params.filter;let query={sortBy:field,sortDir:order,page:page-1,limit:perPage};if(Object.keys(filter).length>0)query[\"filters\"]=filter;return httpClient(`${apiUrl}/${resource}/list`,{method:'POST',body:JSON.stringify(query)}).then(_ref4=>{let{headers,json}=_ref4;return{data:json.data,total:json.count};});},update:(resource,params)=>httpClient(`${apiUrl}/${resource}/${params.id}`,{method:'PUT',body:JSON.stringify({...params.data,id:params.id})}).then(_ref5=>{let{json}=_ref5;return{data:json};}),// simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\nupdateMany:(resource,params)=>Promise.all(params.ids.map(id=>httpClient(`${apiUrl}/${resource}/${id}`,{method:'PUT',body:JSON.stringify({...params.data,id:id})}))).then(responses=>({data:responses.map(_ref6=>{let{json}=_ref6;return json.id;})})),create:(resource,params)=>httpClient(`${apiUrl}/${resource}`,{method:'POST',body:JSON.stringify(params.data)}).then(_ref7=>{let{json}=_ref7;return{data:json};}),delete:(resource,params)=>httpClient(`${apiUrl}/${resource}/${params.id}`,{method:'DELETE',headers:new Headers({'Content-Type':'text/plain'})}).then(_ref8=>{let{json}=_ref8;return{data:json};}),// simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\ndeleteMany:(resource,params)=>Promise.all(params.ids.map(id=>httpClient(`${apiUrl}/${resource}/${id}`,{method:'DELETE',headers:new Headers({'Content-Type':'text/plain'})}))).then(responses=>({data:responses.map(_ref9=>{let{json}=_ref9;return json.id;})}))};});","map":{"version":3,"names":["fetchUtils","apiUrl","httpClient","arguments","length","undefined","fetchJson","countHeader","getList","resource","params","page","perPage","pagination","field","order","sort","filter","query","sortBy","sortDir","limit","Object","keys","method","body","JSON","stringify","then","_ref","headers","json","data","total","count","getOne","id","_ref2","getMany","filters","ids","_ref3","getManyReference","_ref4","update","_ref5","updateMany","Promise","all","map","responses","_ref6","create","_ref7","delete","Headers","_ref8","deleteMany","_ref9"],"sources":["/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/dataProvider/dataProvider.tsx"],"sourcesContent":["import { stringify } from 'query-string';\nimport { fetchUtils, DataProvider } from 'ra-core';\n\n/**\n * Maps react-admin queries to a simple REST API\n *\n * This REST dialect is similar to the one of FakeRest\n *\n * @see https://github.com/marmelab/FakeRest\n *\n * @example\n *\n * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * getOne      => GET http://my.api.url/posts/123\n * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}\n * update      => PUT http://my.api.url/posts/123\n * create      => POST http://my.api.url/posts\n * delete      => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import simpleRestProvider from 'ra-data-simple-rest';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\nexport default (\n    apiUrl: string,\n    httpClient = fetchUtils.fetchJson,\n    countHeader: string = 'Content-Range'\n): DataProvider => ({\n    getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        \n        const filter = params.filter;\n        \n        let query:any = {\n            sortBy: field,\n            sortDir: order,\n            page: (page - 1),\n            limit: perPage\n        };\n\n        if (Object.keys(filter).length > 0)\n            query[\"filters\"] = filter\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filters: {\n                \"id\": {\n                    \"in\": params.ids\n                }\n            }\n        };\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        \n        const filter = params.filter;\n        \n        let query:any = {\n            sortBy: field,\n            sortDir: order,\n            page: (page - 1),\n            limit: perPage\n        };\n\n        if (Object.keys(filter).length > 0)\n            query[\"filters\"] = filter\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify({...params.data, id: params.id}),\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n    updateMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'PUT',\n                    body: JSON.stringify({...params.data, id: id}),\n                })\n            )\n        ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'text/plain',\n            }),\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    deleteMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'DELETE',\n                    headers: new Headers({\n                        'Content-Type': 'text/plain',\n                    }),\n                })\n            )\n        ).then(responses => ({\n            data: responses.map(({ json }) => json.id),\n        })),\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}