{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useNotify, useCheckForApplicationUpdate } from 'ra-core';\nimport { ApplicationUpdatedNotification } from './ApplicationUpdatedNotification';\n/**\n * Display a notification asking users to reload the page when the application code has changed.\n *\n * @param {CheckForApplicationUpdateProps} props\n * @param {boolean} options.disabled Optional. Whether the check should be disabled. Defaults to false.\n * @param {string|ReactElement} props.notification The notification to display to the user. Displayed only if `updateMode` is manual. Defaults to `<ApplicationUpdatedNotification />`.\n * @param {string} options.url Optional. The URL to download to check for code update. Defaults to the current URL.\n * @param {RequestInit} options.fetchOptions Optional. The options passed to fetch function when checking for update.\n * @param {number} options.interval Optional. The interval in milliseconds between two checks. Defaults to 3600000 (1 hour).\n *\n * @example <caption>Basic usage</caption>\n * import { Admin, Resource, Layout, CheckForApplicationUpdate, ListGuesser } from 'react-admin';\n *\n * const MyLayout = ({ children, ...props }) => (\n *   <Layout {...props}>\n *     {children}\n *     <CheckForApplicationUpdate />\n *   </Layout>\n * );\n *\n * const App = () => (\n *   <Admin layout={MyLayout}>\n *      <Resource name=\"posts\" list={ListGuesser} />\n *   </Admin>\n * );\n *\n * @example <caption>Custom notification</caption>\n * import { forwardRef } from 'react';\n * import { Admin, Resource, Layout, CheckForApplicationUpdate, ListGuesser } from 'react-admin';\n *\n * const CustomAppUpdatedNotification = forwardRef((props, ref) => (\n *   <Alert\n *     ref={ref}\n *     severity=\"info\"\n *     action={\n *       <Button\n *         color=\"inherit\"\n *         size=\"small\"\n *         onClick={() => window.location.reload()}\n *       >\n *         Update\n *       </Button>\n *     }\n *   >\n *     A new version of the application is available. Please update.\n *   </Alert>\n * ));\n *\n * const MyLayout = ({ children, ...props }) => (\n *   <Layout {...props}>\n *     {children}\n *     <CheckForApplicationUpdate notification={<CustomAppUpdatedNotification />} />\n *   </Layout>\n * );\n *\n * const App = () => (\n *   <Admin layout={MyLayout}>\n *      <Resource name=\"posts\" list={ListGuesser} />\n *   </Admin>\n * );\n */\nexport var CheckForApplicationUpdate = function (props) {\n  var _a = props.notification,\n    notification = _a === void 0 ? DEFAULT_NOTIFICATION : _a,\n    rest = __rest(props, [\"notification\"]);\n  var notify = useNotify();\n  var onNewVersionAvailable = function () {\n    notify(notification, {\n      type: 'info',\n      autoHideDuration: null\n    });\n  };\n  useCheckForApplicationUpdate(__assign({\n    onNewVersionAvailable: onNewVersionAvailable\n  }, rest));\n  return null;\n};\nvar DEFAULT_NOTIFICATION = React.createElement(ApplicationUpdatedNotification, null);","map":{"version":3,"names":["React","useNotify","useCheckForApplicationUpdate","ApplicationUpdatedNotification","CheckForApplicationUpdate","props","_a","notification","DEFAULT_NOTIFICATION","rest","__rest","notify","onNewVersionAvailable","type","autoHideDuration","__assign","createElement"],"sources":["../../../src/layout/CheckForApplicationUpdate.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SACIC,SAAS,EAETC,4BAA4B,QACzB,SAAS;AAChB,SAASC,8BAA8B,QAAQ,kCAAkC;AAEjF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,OAAO,IAAMC,yBAAyB,GAAG,SAAAA,CACrCC,KAAqC;EAE7B,IAAAC,EAAA,GAAiDD,KAAK,CAAAE,YAAnB;IAAnCA,YAAY,GAAAD,EAAA,cAAGE,oBAAoB,GAAAF,EAAA;IAAKG,IAAI,GAAAC,MAAA,CAAKL,KAAK,EAAxD,gBAAgD,CAAF;EACpD,IAAMM,MAAM,GAAGV,SAAS,EAAE;EAE1B,IAAMW,qBAAqB,GAAG,SAAAA,CAAA;IAC1BD,MAAM,CAACJ,YAAY,EAAE;MACjBM,IAAI,EAAE,MAAM;MACZC,gBAAgB,EAAE;KACrB,CAAC;EACN,CAAC;EAEDZ,4BAA4B,CAAAa,QAAA;IAAGH,qBAAqB,EAAAA;EAAA,GAAKH,IAAI,EAAG;EAChE,OAAO,IAAI;AACf,CAAC;AAQD,IAAMD,oBAAoB,GAAGR,KAAA,CAAAgB,aAAA,CAACb,8BAA8B,OAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}