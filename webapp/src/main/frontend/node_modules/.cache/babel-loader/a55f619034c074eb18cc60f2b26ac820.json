{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isLoading: false, isIdle: true }]\n * - start:   [update, { isLoading: true }]\n * - success: [update, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isLoading: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport var useUpdate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n    data = params.data,\n    meta = params.meta;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    reactMutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      id = _a.id,\n      data = _a.data;\n    // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n    var updateColl = function (old) {\n      if (!old) return;\n      var index = old.findIndex(\n      // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n      if (index === -1) {\n        return old;\n      }\n      return __spreadArray(__spreadArray(__spreadArray([], old.slice(0, index), true), [__assign(__assign({}, old[index]), data)], false), old.slice(index + 1), true);\n    };\n    queryClient.setQueryData([resource, 'getOne', {\n      id: String(id),\n      meta: meta\n    }], function (record) {\n      return __assign(__assign({}, record), data);\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getList'], function (res) {\n      return res && res.data ? __assign(__assign({}, res), {\n        data: updateColl(res.data)\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getInfiniteList'], function (res) {\n      return res && res.pages ? __assign(__assign({}, res), {\n        pages: res.pages.map(function (page) {\n          return __assign(__assign({}, page), {\n            data: updateColl(page.data)\n          });\n        })\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n      return res && res.data ? {\n        data: updateColl(res.data),\n        total: res.total\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.id,\n      callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n      _e = _b.data,\n      callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n      _f = _b.meta,\n      callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f,\n      _g = _b.previousData,\n      callTimePreviousData = _g === void 0 ? paramsRef.current.previousData : _g;\n    return dataProvider.update(callTimeResource, {\n      id: callTimeId,\n      data: callTimeData,\n      previousData: callTimePreviousData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, reactMutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.id,\n          callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId,\n          data: data\n        });\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        }\n        // call-time success callback is executed by react-query\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var update = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, _a, returnPromise, onSuccess, onSettled, onError, _b, callTimeId, _c, callTimeData, _d, callTimeMeta, previousRecord, queryKeys;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, _a = updateOptions.returnPromise, returnPromise = _a === void 0 ? reactMutationOptions.returnPromise : _a, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2 /*return*/, mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  onSuccess: onSuccess,\n                  onSettled: onSettled,\n                  onError: onError\n                })];\n              }\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n            _b = callTimeParams.id, callTimeId = _b === void 0 ? id : _b, _c = callTimeParams.data, callTimeData = _c === void 0 ? data : _c, _d = callTimeParams.meta, callTimeMeta = _d === void 0 ? meta : _d;\n            previousRecord = queryClient.getQueryData([callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }]);\n            queryKeys = [[callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }], [callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _e.sent();\n            // Optimistically update to the new value\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId,\n              data: callTimeData\n            });\n            // run the success callbacks during the next tick\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return [useEvent(update), mutation];\n};","map":{"version":3,"names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useUpdate","resource","params","options","dataProvider","queryClient","id","data","meta","_a","mutationMode","reactMutationOptions","__rest","mode","paramsRef","snapshot","updateCache","now","Date","updatedAt","current","updateColl","old","index","findIndex","record","__spreadArray","slice","setQueryData","String","__assign","setQueriesData","res","pages","map","page","coll","length","total","mutation","_b","_c","callTimeResource","_d","callTimeId","_e","callTimeData","_f","callTimeMeta","_g","previousData","callTimePreviousData","update","then","onMutate","variables","__awaiter","userContext","sent","onError","error","context","forEach","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","updateOptions","returnPromise","console","warn","mutateAsync","mutate","previousRecord","getQueryData","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo"],"sources":["../../../src/dataProvider/useUpdate.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}