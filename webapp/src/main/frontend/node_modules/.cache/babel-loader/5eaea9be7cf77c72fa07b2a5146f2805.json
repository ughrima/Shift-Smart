{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useResetStore } from '../store';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the store.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n  var authProvider = useAuthProvider();\n  var queryClient = useQueryClient();\n  var resetStore = useResetStore();\n  var navigate = useNavigate();\n  // useNavigate forces rerenders on every navigation, even if we don't use the result\n  // see https://github.com/remix-run/react-router/issues/7634\n  // so we use a ref to bail out of rerenders when we don't need to\n  var navigateRef = useRef(navigate);\n  var location = useLocation();\n  var locationRef = useRef(location);\n  var basename = useBasename();\n  var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n  /*\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used the location from useLocation as a dependency of the logout\n   * function, it would be rebuilt each time the user changes location.\n   * Consequently, that would force a rerender of all components using this hook\n   * upon navigation (CoreAdminRouter for example).\n   *\n   * To avoid that, we store the location in a ref.\n   */\n  useEffect(function () {\n    locationRef.current = location;\n    navigateRef.current = navigate;\n  }, [location, navigate]);\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (redirectTo === void 0) {\n      redirectTo = loginUrl;\n    }\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      if (redirectToFromProvider === false || redirectTo === false) {\n        resetStore();\n        queryClient.clear();\n        // do not redirect\n        return;\n      }\n      var finalRedirectTo = redirectToFromProvider || redirectTo;\n      if (finalRedirectTo === null || finalRedirectTo === void 0 ? void 0 : finalRedirectTo.startsWith('http')) {\n        // absolute link (e.g. https://my.oidc.server/login)\n        resetStore();\n        queryClient.clear();\n        window.location.href = finalRedirectTo;\n        return finalRedirectTo;\n      }\n      // redirectTo is an internal location that may contain a query string, e.g. '/login?foo=bar'\n      // we must split it to pass a structured location to navigate()\n      var redirectToParts = finalRedirectTo.split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n      var newLocationOptions = {};\n      if (redirectToCurrentLocationAfterLogin && locationRef.current && locationRef.current.pathname) {\n        newLocationOptions = {\n          state: {\n            nextPathname: locationRef.current.pathname,\n            nextSearch: locationRef.current.search\n          }\n        };\n      }\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n      navigateRef.current(newLocation, newLocationOptions);\n      resetStore();\n      queryClient.clear();\n      return redirectToFromProvider;\n    });\n  }, [authProvider, resetStore, loginUrl, queryClient]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    navigate({\n      pathname: loginUrl\n    }, {\n      state: {\n        nextPathname: location && location.pathname\n      }\n    });\n    resetStore();\n    queryClient.clear();\n    return Promise.resolve();\n  }, [resetStore, location, navigate, loginUrl, queryClient]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;","map":{"version":3,"names":["useCallback","useEffect","useRef","useLocation","useNavigate","useQueryClient","useAuthProvider","defaultAuthParams","useResetStore","useBasename","removeDoubleSlashes","useLogout","authProvider","queryClient","resetStore","navigate","navigateRef","location","locationRef","basename","loginUrl","concat","current","logout","params","redirectTo","redirectToCurrentLocationAfterLogin","then","redirectToFromProvider","clear","finalRedirectTo","startsWith","window","href","redirectToParts","split","newLocation","pathname","newLocationOptions","state","nextPathname","nextSearch","search","logoutWithoutProvider","_","Promise","resolve"],"sources":["../../../src/auth/useLogout.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}