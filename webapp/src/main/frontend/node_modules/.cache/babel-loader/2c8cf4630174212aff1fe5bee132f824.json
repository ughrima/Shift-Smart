{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { UpdateWithConfirmButton } from './UpdateWithConfirmButton';\nimport { UpdateWithUndoButton } from './UpdateWithUndoButton';\n/**\n * Updates the current record.\n *\n * To be used inside the <Edit actions> prop or <Show actions> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Edit, TopToolbar, UpdateButton } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <UpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *     <Edit actions={<PostEditActions />}>\n *         ...\n *     </Edit>\n * );\n */\nexport var UpdateButton = function (props) {\n  var _a = props.mutationMode,\n    mutationMode = _a === void 0 ? 'undoable' : _a,\n    rest = __rest(props, [\"mutationMode\"]);\n  return mutationMode === 'undoable' ? React.createElement(UpdateWithUndoButton, __assign({}, rest)) : React.createElement(UpdateWithConfirmButton, __assign({\n    mutationMode: mutationMode\n  }, rest));\n};\nUpdateButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  icon: PropTypes.element\n};","map":{"version":3,"names":["React","PropTypes","UpdateWithConfirmButton","UpdateWithUndoButton","UpdateButton","props","_a","mutationMode","rest","__rest","createElement","__assign","propTypes","label","string","resource","selectedIds","arrayOf","any","oneOf","icon","element"],"sources":["../../../src/button/UpdateButton.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,uBAAuB,QAEpB,2BAA2B;AAClC,SACIC,oBAAoB,QAEjB,wBAAwB;AAE/B;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAACC,KAAwB;EACzC,IAAAC,EAAA,GAAuCD,KAAK,CAAAE,YAAnB;IAAzBA,YAAY,GAAAD,EAAA,cAAG,UAAU,GAAAA,EAAA;IAAKE,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAA9C,gBAAsC,CAAF;EAE1C,OAAOE,YAAY,KAAK,UAAU,GAC9BP,KAAA,CAAAU,aAAA,CAACP,oBAAoB,EAAAQ,QAAA,KAAKH,IAAI,EAAI,GAElCR,KAAA,CAAAU,aAAA,CAACR,uBAAuB,EAAAS,QAAA;IAACJ,YAAY,EAAEA;EAAY,GAAMC,IAAI,EAChE;AACL,CAAC;AAUDJ,YAAY,CAACQ,SAAS,GAAG;EACrBC,KAAK,EAAEZ,SAAS,CAACa,MAAM;EACvBC,QAAQ,EAAEd,SAAS,CAACa,MAAM;EAC1BE,WAAW,EAAEf,SAAS,CAACgB,OAAO,CAAChB,SAAS,CAACiB,GAAG,CAAC;EAC7CX,YAAY,EAAEN,SAAS,CAACkB,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxEC,IAAI,EAAEnB,SAAS,CAACoB;CACnB","ignoreList":[]},"metadata":{},"sourceType":"module"}