{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useQuery } from 'react-query';\nimport { useLocation } from 'react-router';\nimport { useRedirect } from '../routing';\nimport useAuthProvider from './useAuthProvider';\n/**\n * This hook calls the `authProvider.handleCallback()` method on mount. This is meant to be used in a route called\n * by an external authentication service (e.g. Auth0) after the user has logged in.\n * By default, it redirects to application home page upon success, or to the `redirectTo` location returned by `authProvider. handleCallback`.\n *\n * @returns An object containing { isLoading, data, error, refetch }.\n */\nexport var useHandleAuthCallback = function (options) {\n  var authProvider = useAuthProvider();\n  var redirect = useRedirect();\n  var location = useLocation();\n  var locationState = location.state;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var defaultRedirectUrl = nextPathName ? nextPathName + nextSearch : '/';\n  return useQuery(['auth', 'handleCallback'], function () {\n    return authProvider && typeof authProvider.handleCallback === 'function' ? authProvider.handleCallback() : Promise.resolve();\n  }, __assign({\n    retry: false,\n    onSuccess: function (data) {\n      var _a;\n      // AuthProviders relying on a third party services redirect back to the app can't\n      // use the location state to store the path on which the user was before the login.\n      // So we support a fallback on the localStorage.\n      var previousLocation = localStorage.getItem(PreviousLocationStorageKey);\n      var redirectTo = (_a = data === null || data === void 0 ? void 0 : data.redirectTo) !== null && _a !== void 0 ? _a : previousLocation;\n      if (redirectTo === false) {\n        return;\n      }\n      redirect(redirectTo !== null && redirectTo !== void 0 ? redirectTo : defaultRedirectUrl);\n    }\n  }, options));\n};\n/**\n * Key used to store the previous location in localStorage.\n * Used by the useHandleAuthCallback hook to redirect the user to their previous location after a successful login.\n */\nexport var PreviousLocationStorageKey = '@react-admin/nextPathname';","map":{"version":3,"names":["useQuery","useLocation","useRedirect","useAuthProvider","useHandleAuthCallback","options","authProvider","redirect","location","locationState","state","nextPathName","nextPathname","nextSearch","defaultRedirectUrl","handleCallback","Promise","resolve","__assign","retry","onSuccess","data","previousLocation","localStorage","getItem","PreviousLocationStorageKey","redirectTo","_a"],"sources":["../../../src/auth/useHandleAuthCallback.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,SAASA,QAAQ,QAAyB,aAAa;AACvD,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,WAAW,QAAQ,YAAY;AAExC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C;;;;;;;AAOA,OAAO,IAAMC,qBAAqB,GAAG,SAAAA,CACjCC,OAA0D;EAE1D,IAAMC,YAAY,GAAGH,eAAe,EAAE;EACtC,IAAMI,QAAQ,GAAGL,WAAW,EAAE;EAC9B,IAAMM,QAAQ,GAAGP,WAAW,EAAE;EAC9B,IAAMQ,aAAa,GAAGD,QAAQ,CAACE,KAAY;EAC3C,IAAMC,YAAY,GAAGF,aAAa,IAAIA,aAAa,CAACG,YAAY;EAChE,IAAMC,UAAU,GAAGJ,aAAa,IAAIA,aAAa,CAACI,UAAU;EAC5D,IAAMC,kBAAkB,GAAGH,YAAY,GAAGA,YAAY,GAAGE,UAAU,GAAG,GAAG;EAEzE,OAAOb,QAAQ,CACX,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAC1B;IACI,OAAAM,YAAY,IAAI,OAAOA,YAAY,CAACS,cAAc,KAAK,UAAU,GAC3DT,YAAY,CAACS,cAAc,EAAE,GAC7BC,OAAO,CAACC,OAAO,EAAE;EAFvB,CAEuB,EAAAC,QAAA;IAEvBC,KAAK,EAAE,KAAK;IACZC,SAAS,EAAE,SAAAA,CAAAC,IAAI;;MACX;MACA;MACA;MACA,IAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CACzCC,0BAA0B,CAC7B;MACD,IAAMC,UAAU,GACZ,CAAAC,EAAA,GAACN,IAA2B,aAA3BA,IAAI,uBAAJA,IAAI,CAAyBK,UAAU,cAAAC,EAAA,cAAAA,EAAA,GACxCL,gBAAgB;MAEpB,IAAII,UAAU,KAAK,KAAK,EAAE;QACtB;;MAGJnB,QAAQ,CAACmB,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIZ,kBAAkB,CAAC;IAC9C;EAAC,GACET,OAAO,EAEjB;AACL,CAAC;AAED;;;;AAIA,OAAO,IAAMoB,0BAA0B,GAAG,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module"}