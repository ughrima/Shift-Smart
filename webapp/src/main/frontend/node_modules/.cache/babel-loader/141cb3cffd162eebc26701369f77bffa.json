{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext } from 'ra-core';\nimport { Table } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\nimport { ListNoResults } from '../ListNoResults';\nvar defaultBulkActionButtons = React.createElement(BulkDeleteButton, null);\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowClick\n *  - rowSx\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowSx = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <Datagrid rowSx={postRowSx}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nexport var Datagrid = React.forwardRef(function (props, ref) {\n  var _a = props.optimized,\n    optimized = _a === void 0 ? false : _a,\n    _b = props.body,\n    body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b,\n    _c = props.header,\n    header = _c === void 0 ? DatagridHeader : _c,\n    children = props.children,\n    className = props.className,\n    _d = props.empty,\n    empty = _d === void 0 ? DefaultEmpty : _d,\n    expand = props.expand,\n    _e = props.bulkActionButtons,\n    bulkActionButtons = _e === void 0 ? defaultBulkActionButtons : _e,\n    hover = props.hover,\n    isRowSelectable = props.isRowSelectable,\n    isRowExpandable = props.isRowExpandable,\n    resource = props.resource,\n    rowClick = props.rowClick,\n    rowSx = props.rowSx,\n    rowStyle = props.rowStyle,\n    _f = props.size,\n    size = _f === void 0 ? 'small' : _f,\n    sx = props.sx,\n    _g = props.expandSingle,\n    expandSingle = _g === void 0 ? false : _g,\n    rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"className\", \"empty\", \"expand\", \"bulkActionButtons\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowSx\", \"rowStyle\", \"size\", \"sx\", \"expandSingle\"]);\n  var _h = useListContext(props),\n    sort = _h.sort,\n    data = _h.data,\n    isLoading = _h.isLoading,\n    onSelect = _h.onSelect,\n    onToggleItem = _h.onToggleItem,\n    selectedIds = _h.selectedIds,\n    setSort = _h.setSort,\n    total = _h.total;\n  var hasBulkActions = !!bulkActionButtons !== false;\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable,\n      expandSingle: expandSingle\n    };\n  }, [isRowExpandable, expandSingle]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n  // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n  var handleToggleItem = useCallback(function (id, event) {\n    var ids = data.map(function (record) {\n      return record.id;\n    });\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data.find(function (record) {\n          return record.id === id;\n        }));\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n  if (isLoading === true) {\n    return React.createElement(DatagridLoading, {\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the Datagrid displays the empty component.\n   */\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(DatagridRoot, {\n    sx: sx,\n    className: clsx(DatagridClasses.root, className)\n  }, bulkActionButtons !== false ? React.createElement(BulkActionsToolbar, {\n    selectedIds: selectedIds\n  }, isValidElement(bulkActionButtons) ? bulkActionButtons : defaultBulkActionButtons) : null, React.createElement(\"div\", {\n    className: DatagridClasses.tableWrapper\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: DatagridClasses.table,\n    size: size\n  }, sanitizeRestProps(rest)), createOrCloneElement(header, {\n    children: children,\n    sort: sort,\n    data: data,\n    hasExpand: !!expand,\n    hasBulkActions: hasBulkActions,\n    isRowSelectable: isRowSelectable,\n    onSelect: onSelect,\n    resource: resource,\n    selectedIds: selectedIds,\n    setSort: setSort\n  }, children), createOrCloneElement(body, {\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowSx: rowSx,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable\n  }, children)))));\n});\nvar createOrCloneElement = function (element, props, children) {\n  return isValidElement(element) ? cloneElement(element, props, children) : createElement(element, props, children);\n};\nDatagrid.propTypes = {\n  // @ts-ignore\n  body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  data: PropTypes.arrayOf(PropTypes.any),\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore\n  header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hover: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  // @ts-ignore\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.bool]),\n  rowSx: PropTypes.func,\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func,\n  expandSingle: PropTypes.bool\n};\nvar injectedProps = ['isRequired', 'setFilter', 'setPagination', 'limitChoicesToValue', 'translateChoice',\n// Datagrid may be used as an alternative to SelectInput\n'field', 'fieldState', 'formState'];\nvar sanitizeRestProps = function (props) {\n  return Object.keys(sanitizeListRestProps(props)).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\nDatagrid.displayName = 'Datagrid';\nvar DefaultEmpty = React.createElement(ListNoResults, null);","map":{"version":3,"names":["React","cloneElement","createElement","isValidElement","useCallback","useRef","useEffect","useMemo","PropTypes","sanitizeListRestProps","useListContext","Table","clsx","union","difference","DatagridHeader","DatagridLoading","DatagridBody","PureDatagridBody","DatagridContextProvider","DatagridClasses","DatagridRoot","BulkActionsToolbar","BulkDeleteButton","ListNoResults","defaultBulkActionButtons","Datagrid","forwardRef","props","ref","_a","optimized","_b","body","_c","header","children","className","_d","empty","DefaultEmpty","expand","_e","bulkActionButtons","hover","isRowSelectable","isRowExpandable","resource","rowClick","rowSx","rowStyle","_f","size","sx","_g","expandSingle","rest","__rest","_h","sort","data","isLoading","onSelect","onToggleItem","selectedIds","setSort","total","hasBulkActions","contextValue","lastSelected","length","current","JSON","stringify","handleToggleItem","id","event","ids","map","record","lastSelectedIndex","indexOf","target","checked","shiftKey","index","idsBetweenSelections","slice","Math","min","max","newSelectedIds","filter","find","nbChildren","Children","count","value","root","tableWrapper","__assign","table","sanitizeRestProps","createOrCloneElement","hasExpand","element","propTypes","oneOfType","elementType","bool","node","isRequired","string","exact","field","order","oneOf","arrayOf","any","func","number","injectedProps","Object","keys","propName","includes","reduce","acc","key","displayName"],"sources":["../../../../src/list/datagrid/Datagrid.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}