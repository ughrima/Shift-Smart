{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChoicesContextProvider, useReferenceInputController, ResourceContextProvider } from 'ra-core';\nimport { AutocompleteInput } from './AutocompleteInput';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceInput = function (props) {\n  var _a = props.children,\n    children = _a === void 0 ? defaultChildren : _a,\n    reference = props.reference,\n    _b = props.sort,\n    sort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b,\n    _c = props.filter,\n    filter = _c === void 0 ? {} : _c;\n  var controllerProps = useReferenceInputController(__assign(__assign({}, props), {\n    sort: sort,\n    filter: filter\n  }));\n  if (props.validate && process.env.NODE_ENV !== 'production') {\n    throw new Error('<ReferenceInput> does not accept a validate prop. Set the validate prop on the child instead.');\n  }\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceInput.propTypes = {\n  children: PropTypes.element,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nvar defaultChildren = React.createElement(AutocompleteInput, null);","map":{"version":3,"names":["React","PropTypes","ChoicesContextProvider","useReferenceInputController","ResourceContextProvider","AutocompleteInput","ReferenceInput","props","_a","children","defaultChildren","reference","_b","sort","field","order","_c","filter","controllerProps","__assign","validate","process","env","NODE_ENV","Error","createElement","value","propTypes","element","object","label","string","page","number","perPage","record","isRequired","resource","shape","oneOf","source"],"sources":["../../../src/input/ReferenceInput.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAuB,MAAM,OAAO;AAC3C,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,sBAAsB,EACtBC,2BAA2B,EAE3BC,uBAAuB,QAEpB,SAAS;AAEhB,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAACC,KAA0B;EAEjD,IAAAC,EAAA,GAIAD,KAAK,CAAAE,QAJqB;IAA1BA,QAAQ,GAAAD,EAAA,cAAGE,eAAe,GAAAF,EAAA;IAC1BG,SAAS,GAGTJ,KAAK,CAAAI,SAHI;IACTC,EAAA,GAEAL,KAAK,CAAAM,IAFgC;IAArCA,IAAI,GAAAD,EAAA,cAAG;MAAEE,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAM,CAAE,GAAAH,EAAA;IACrCI,EAAA,GACAT,KAAK,CAAAU,MADM;IAAXA,MAAM,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;EAGf,IAAME,eAAe,GAAGf,2BAA2B,CAAAgB,QAAA,CAAAA,QAAA,KAC5CZ,KAAK;IACRM,IAAI,EAAAA,IAAA;IACJI,MAAM,EAAAA;EAAA,GACR;EAEF,IAAIV,KAAK,CAACa,QAAQ,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzD,MAAM,IAAIC,KAAK,CACX,+FAA+F,CAClG;;EAGL,OACIxB,KAAA,CAAAyB,aAAA,CAACrB,uBAAuB;IAACsB,KAAK,EAAEf;EAAS,GACrCX,KAAA,CAAAyB,aAAA,CAACvB,sBAAsB;IAACwB,KAAK,EAAER;EAAe,GACzCT,QAAQ,CACY,CACH;AAElC,CAAC;AAEDH,cAAc,CAACqB,SAAS,GAAG;EACvBlB,QAAQ,EAAER,SAAS,CAAC2B,OAAO;EAC3BX,MAAM,EAAEhB,SAAS,CAAC4B,MAAM;EACxBC,KAAK,EAAE7B,SAAS,CAAC8B,MAAM;EACvBC,IAAI,EAAE/B,SAAS,CAACgC,MAAM;EACtBC,OAAO,EAAEjC,SAAS,CAACgC,MAAM;EACzBE,MAAM,EAAElC,SAAS,CAAC4B,MAAM;EACxBlB,SAAS,EAAEV,SAAS,CAAC8B,MAAM,CAACK,UAAU;EACtCC,QAAQ,EAAEpC,SAAS,CAAC8B,MAAM;EAC1BlB,IAAI,EAAEZ,SAAS,CAACqC,KAAK,CAAC;IAClBxB,KAAK,EAAEb,SAAS,CAAC8B,MAAM;IACvBhB,KAAK,EAAEd,SAAS,CAACsC,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC;GACzC,CAAC;EACFC,MAAM,EAAEvC,SAAS,CAAC8B;CACrB;AAED,IAAMrB,eAAe,GAAGV,KAAA,CAAAyB,aAAA,CAACpB,iBAAiB,OAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}