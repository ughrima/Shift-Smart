{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nvar NumberFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    locales = props.locales,\n    options = props.options,\n    textAlign = props.textAlign,\n    _a = props.transform,\n    transform = _a === void 0 ? defaultTransform : _a,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\", \"transform\"]);\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  if (transform) {\n    value = transform(value);\n  }\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), hasNumberFormat && typeof value === 'number' ? value.toLocaleString(locales, options) : value);\n};\nvar defaultTransform = function (value) {\n  return value && typeof value === 'string' && !isNaN(value) ? +value : value;\n};\nNumberFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberFieldImpl.displayName = 'NumberFieldImpl';\nexport var NumberField = genericMemo(NumberFieldImpl);\n// @ts-expect-error This is a hack that replaces react support for defaultProps. We currently need this for the Datagrid.\nNumberField.textAlign = 'right';\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');","map":{"version":3,"names":["React","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","NumberFieldImpl","props","className","emptyText","source","locales","options","textAlign","_a","transform","defaultTransform","rest","__rest","record","translate","value","createElement","__assign","component","variant","_","hasNumberFormat","toLocaleString","isNaN","propTypes","oneOfType","string","arrayOf","object","displayName","NumberField","Intl","NumberFormat"],"sources":["../../../src/field/NumberField.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}