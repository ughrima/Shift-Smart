{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useMemo } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getManyReference parameters { target, id, pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.target The target resource key, e.g. 'post_id'\n * @prop params.id The identifier of the record to look for in target, e.g. '123'\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetManyReference, useRecordContext } from 'react-admin';\n *\n * const PostComments = () => {\n *     const record = useRecordContext();\n *     // fetch all comments related to the current record\n *     const { data, isLoading, error } = useGetManyReference(\n *         'comments',\n *         { target: 'post_id', id: record.id, pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(comment =>\n *         <li key={comment.id}>{comment.body}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetManyReference = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  var target = params.target,\n    id = params.id,\n    _a = params.pagination,\n    pagination = _a === void 0 ? {\n      page: 1,\n      perPage: 25\n    } : _a,\n    _b = params.sort,\n    sort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b,\n    _c = params.filter,\n    filter = _c === void 0 ? {} : _c,\n    meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var result = useQuery([resource, 'getManyReference', {\n    target: target,\n    id: id,\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }], function () {\n    if (!target || id == null) {\n      // check at runtime to support partial parameters with the enabled option\n      return Promise.reject(new Error('target and id are required'));\n    }\n    return dataProvider.getManyReference(resource, {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data,\n        total = _a.total,\n        pageInfo = _a.pageInfo;\n      return {\n        data: data,\n        total: total,\n        pageInfo: pageInfo\n      };\n    });\n  }, __assign({\n    onSuccess: function (value) {\n      var _a;\n      // optimistically populate the getOne cache\n      (_a = value === null || value === void 0 ? void 0 : value.data) === null || _a === void 0 ? void 0 : _a.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n    }\n  }, options));\n  return useMemo(function () {\n    var _a, _b, _c;\n    return result.data ? __assign(__assign({}, result), {\n      data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data,\n      total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total,\n      pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo\n    }) : result;\n  }, [result]);\n};","map":{"version":3,"names":["useMemo","useQuery","useQueryClient","useDataProvider","useGetManyReference","resource","params","options","target","id","_a","pagination","page","perPage","_b","sort","field","order","_c","filter","meta","dataProvider","queryClient","result","Promise","reject","Error","getManyReference","then","data","total","pageInfo","__assign","onSuccess","value","forEach","record","setQueryData","String","oldRecord"],"sources":["../../../src/dataProvider/useGetManyReference.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}