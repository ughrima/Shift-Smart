{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { fieldPropTypes } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport var ReferenceArrayField = function (props) {\n  var filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source,\n    queryOptions = props.queryOptions;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceArrayFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    queryOptions: queryOptions\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  queryOptions: PropTypes.any\n});\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination,\n    className = props.className,\n    sx = props.sx;\n  var _a = useListContext(props),\n    isLoading = _a.isLoading,\n    total = _a.total;\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, isLoading ? React.createElement(LinearProgress, {\n    className: ReferenceArrayFieldClasses.progress\n  }) : React.createElement(\"span\", null, children || React.createElement(SingleFieldList, null), pagination && total !== undefined ? pagination : null));\n};\nReferenceArrayFieldView.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  reference: PropTypes.string.isRequired\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n  progress: \"\".concat(PREFIX, \"-progress\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n    marginTop: theme.spacing(2)\n  }, _b;\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);","map":{"version":3,"names":["React","memo","PropTypes","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","styled","fieldPropTypes","LinearProgress","SingleFieldList","ReferenceArrayField","props","filter","_a","page","perPage","reference","resource","sort","source","queryOptions","record","controllerProps","createElement","value","PureReferenceArrayFieldView","__assign","propTypes","className","string","children","node","label","any","isRequired","sortBy","sortByOrder","ReferenceArrayFieldView","pagination","sx","isLoading","total","Root","ReferenceArrayFieldClasses","progress","undefined","PREFIX","concat","name","overridesResolver","styles","root","theme","_b","marginTop","spacing"],"sources":["../../../src/field/ReferenceArrayField.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}