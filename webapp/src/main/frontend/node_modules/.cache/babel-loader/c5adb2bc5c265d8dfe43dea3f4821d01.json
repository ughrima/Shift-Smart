{"ast":null,"code":"import { useStore } from 'ra-core';\nimport { useMediaQuery } from '@mui/material';\nimport { useThemesContext } from './useThemesContext';\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n * @example // legacy mode, stores the full theme object\n * // to be removed in v5\n * const [theme, setTheme] = useTheme({\n *    palette: {\n *       type: 'light',\n *   },\n * });\n */\nexport var useTheme = function (type) {\n  var darkTheme = useThemesContext().darkTheme;\n  var prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    noSsr: true\n  });\n  // FIXME: remove legacy mode in v5, and remove the RaThemeOptions type\n  var _a = useStore('theme', type !== null && type !== void 0 ? type : prefersDarkMode && darkTheme ? 'dark' : 'light'),\n    theme = _a[0],\n    setter = _a[1];\n  // Ensure that even though the store has its value set to 'dark', we still use the light theme when no dark theme is available\n  return [darkTheme != null ? theme : 'light', setter];\n};","map":{"version":3,"names":["useStore","useMediaQuery","useThemesContext","useTheme","type","darkTheme","prefersDarkMode","noSsr","_a","theme","setter"],"sources":["../../../src/theme/useTheme.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,gBAAgB,QAAQ,oBAAoB;AAIrD;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,QAAQ,GAAG,SAAAA,CACpBC,IAAiC;EAEzB,IAAAC,SAAS,GAAKH,gBAAgB,EAAE,CAAAG,SAAvB;EACjB,IAAMC,eAAe,GAAGL,aAAa,CAAC,8BAA8B,EAAE;IAClEM,KAAK,EAAE;GACV,CAAC;EACF;EACM,IAAAC,EAAA,GAAkBR,QAAQ,CAC5B,OAAO,EACPI,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAKE,eAAe,IAAID,SAAS,GAAG,MAAM,GAAG,OAAQ,CAC5D;IAHMI,KAAK,GAAAD,EAAA;IAAEE,MAAM,GAAAF,EAAA,GAGnB;EAED;EACA,OAAO,CAACH,SAAS,IAAI,IAAI,GAAGI,KAAK,GAAG,OAAO,EAAEC,MAAM,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}