{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { BulkUpdateWithConfirmButton } from './BulkUpdateWithConfirmButton';\nimport { BulkUpdateWithUndoButton } from './BulkUpdateWithUndoButton';\n/**\n * Updates the selected rows.\n *\n * To be used inside the <List bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkUpdateButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkUpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </Fragment>\n * );\n *\n * export const PostList = () => (\n *     <List bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport var BulkUpdateButton = function (props) {\n  var _a = props.mutationMode,\n    mutationMode = _a === void 0 ? 'undoable' : _a,\n    _b = props.data,\n    data = _b === void 0 ? defaultData : _b,\n    rest = __rest(props, [\"mutationMode\", \"data\"]);\n  return mutationMode === 'undoable' ? React.createElement(BulkUpdateWithUndoButton, __assign({\n    data: data\n  }, rest)) : React.createElement(BulkUpdateWithConfirmButton, __assign({\n    mutationMode: mutationMode,\n    data: data\n  }, rest));\n};\nBulkUpdateButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  icon: PropTypes.element\n};\nvar defaultData = [];","map":{"version":3,"names":["React","PropTypes","BulkUpdateWithConfirmButton","BulkUpdateWithUndoButton","BulkUpdateButton","props","_a","mutationMode","_b","data","defaultData","rest","__rest","createElement","__assign","propTypes","label","string","resource","selectedIds","arrayOf","any","oneOf","icon","element"],"sources":["../../../src/button/BulkUpdateButton.tsx"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,2BAA2B,QAExB,+BAA+B;AACtC,SACIC,wBAAwB,QAErB,4BAA4B;AAGnC;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,KAA4B;EACjD,IAAAC,EAAA,GAA2DD,KAAK,CAAAE,YAAvC;IAAzBA,YAAY,GAAAD,EAAA,cAAG,UAAU,GAAAA,EAAA;IAAEE,EAAA,GAAgCH,KAAK,CAAAI,IAAnB;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IAAKG,IAAI,GAAAC,MAAA,CAAKP,KAAK,EAAlE,wBAA0D,CAAF;EAE9D,OAAOE,YAAY,KAAK,UAAU,GAC9BP,KAAA,CAAAa,aAAA,CAACV,wBAAwB,EAAAW,QAAA;IAACL,IAAI,EAAEA;EAAI,GAAME,IAAI,EAAI,GAElDX,KAAA,CAAAa,aAAA,CAACX,2BAA2B,EAAAY,QAAA;IACxBP,YAAY,EAAEA,YAAY;IAC1BE,IAAI,EAAEA;EAAI,GACNE,IAAI,EAEf;AACL,CAAC;AASDP,gBAAgB,CAACW,SAAS,GAAG;EACzBC,KAAK,EAAEf,SAAS,CAACgB,MAAM;EACvBC,QAAQ,EAAEjB,SAAS,CAACgB,MAAM;EAC1BE,WAAW,EAAElB,SAAS,CAACmB,OAAO,CAACnB,SAAS,CAACoB,GAAG,CAAC;EAC7Cd,YAAY,EAAEN,SAAS,CAACqB,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxEC,IAAI,EAAEtB,SAAS,CAACuB;CACnB;AAED,IAAMd,WAAW,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module"}