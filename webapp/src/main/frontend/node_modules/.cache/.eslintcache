[{"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/index.tsx":"1","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/reportWebVitals.ts":"2","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/App.tsx":"3","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/theme.tsx":"4","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/Layout.tsx":"5","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/authProvider.tsx":"6","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/i18n/it.tsx":"7","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/i18n/en.tsx":"8","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/views/calendar.tsx":"9","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/views/eventsummary.tsx":"10","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/dataProvider/index.tsx":"11","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/index.tsx":"12","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/index.tsx":"13","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/index.tsx":"14","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/Header.tsx":"15","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/utils/Utilities.tsx":"16","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/EventPopup.tsx":"17","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/dataProvider/dataProvider.tsx":"18","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeEdit.tsx":"19","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeList.tsx":"20","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeCreate.tsx":"21","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerList.tsx":"22","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerCreate.tsx":"23","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserList.tsx":"24","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserCreate.tsx":"25","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserEdit.tsx":"26","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerEdit.tsx":"27","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/RruleInput.tsx":"28","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/ColorInput.tsx":"29","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/PasswordUpdateBtn.tsx":"30","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/index.tsx":"31","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/reportWebVitals.ts":"32","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/App.tsx":"33","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/theme.tsx":"34","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/authProvider.tsx":"35","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/Layout.tsx":"36","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/i18n/en.tsx":"37","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/i18n/it.tsx":"38","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/views/eventsummary.tsx":"39","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/views/calendar.tsx":"40","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/dataProvider/index.tsx":"41","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/index.tsx":"42","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/index.tsx":"43","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/index.tsx":"44","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/Header.tsx":"45","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/utils/Utilities.tsx":"46","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/EventPopup.tsx":"47","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/dataProvider/dataProvider.tsx":"48","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerList.tsx":"49","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerCreate.tsx":"50","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerEdit.tsx":"51","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserList.tsx":"52","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserEdit.tsx":"53","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeList.tsx":"54","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeCreate.tsx":"55","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeEdit.tsx":"56","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserCreate.tsx":"57","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/RruleInput.tsx":"58","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/PasswordUpdateBtn.tsx":"59","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/ColorInput.tsx":"60"},{"size":565,"mtime":1731584041068,"results":"61","hashOfConfig":"62"},{"size":425,"mtime":1731584041068,"results":"63","hashOfConfig":"62"},{"size":1354,"mtime":1731584041064,"results":"64","hashOfConfig":"62"},{"size":240,"mtime":1731584041068,"results":"65","hashOfConfig":"62"},{"size":1068,"mtime":1731584041064,"results":"66","hashOfConfig":"62"},{"size":2207,"mtime":1731584041064,"results":"67","hashOfConfig":"62"},{"size":10505,"mtime":1731584041068,"results":"68","hashOfConfig":"62"},{"size":1773,"mtime":1731584041068,"results":"69","hashOfConfig":"62"},{"size":18942,"mtime":1731584041068,"results":"70","hashOfConfig":"62"},{"size":3771,"mtime":1731584041068,"results":"71","hashOfConfig":"62"},{"size":1320,"mtime":1731584041068,"results":"72","hashOfConfig":"62"},{"size":296,"mtime":1731584041068,"results":"73","hashOfConfig":"62"},{"size":296,"mtime":1731584041068,"results":"74","hashOfConfig":"62"},{"size":260,"mtime":1731584041068,"results":"75","hashOfConfig":"62"},{"size":5500,"mtime":1731584041064,"results":"76","hashOfConfig":"62"},{"size":686,"mtime":1731584041068,"results":"77","hashOfConfig":"62"},{"size":3423,"mtime":1731584041064,"results":"78","hashOfConfig":"62"},{"size":5028,"mtime":1731584041068,"results":"79","hashOfConfig":"62"},{"size":1877,"mtime":1731584041068,"results":"80","hashOfConfig":"62"},{"size":746,"mtime":1731584041068,"results":"81","hashOfConfig":"62"},{"size":1865,"mtime":1731584041068,"results":"82","hashOfConfig":"62"},{"size":527,"mtime":1731584041068,"results":"83","hashOfConfig":"62"},{"size":1628,"mtime":1731584041068,"results":"84","hashOfConfig":"62"},{"size":477,"mtime":1731584041068,"results":"85","hashOfConfig":"62"},{"size":491,"mtime":1731584041068,"results":"86","hashOfConfig":"62"},{"size":344,"mtime":1731584041068,"results":"87","hashOfConfig":"62"},{"size":1733,"mtime":1731584041068,"results":"88","hashOfConfig":"62"},{"size":4787,"mtime":1731584041068,"results":"89","hashOfConfig":"62"},{"size":2645,"mtime":1731584041064,"results":"90","hashOfConfig":"62"},{"size":3918,"mtime":1731584041064,"results":"91","hashOfConfig":"62"},{"size":565,"mtime":1732616396283,"results":"92","hashOfConfig":"93"},{"size":425,"mtime":1732616396283,"results":"94","hashOfConfig":"93"},{"size":1354,"mtime":1732616396283,"results":"95","hashOfConfig":"93"},{"size":240,"mtime":1732616396283,"results":"96","hashOfConfig":"93"},{"size":2207,"mtime":1732616396283,"results":"97","hashOfConfig":"93"},{"size":1068,"mtime":1732616396283,"results":"98","hashOfConfig":"93"},{"size":1773,"mtime":1732616396287,"results":"99","hashOfConfig":"93"},{"size":10505,"mtime":1732616396287,"results":"100","hashOfConfig":"93"},{"size":3771,"mtime":1732616396287,"results":"101","hashOfConfig":"93"},{"size":18942,"mtime":1732616396287,"results":"102","hashOfConfig":"93"},{"size":1320,"mtime":1732616396287,"results":"103","hashOfConfig":"93"},{"size":296,"mtime":1732616396283,"results":"104","hashOfConfig":"93"},{"size":260,"mtime":1732616396287,"results":"105","hashOfConfig":"93"},{"size":296,"mtime":1732616396287,"results":"106","hashOfConfig":"93"},{"size":5500,"mtime":1732616396283,"results":"107","hashOfConfig":"93"},{"size":686,"mtime":1732616396287,"results":"108","hashOfConfig":"93"},{"size":3423,"mtime":1732616396283,"results":"109","hashOfConfig":"93"},{"size":5028,"mtime":1732616396287,"results":"110","hashOfConfig":"93"},{"size":527,"mtime":1732616396283,"results":"111","hashOfConfig":"93"},{"size":1628,"mtime":1732616396283,"results":"112","hashOfConfig":"93"},{"size":1733,"mtime":1732616396283,"results":"113","hashOfConfig":"93"},{"size":477,"mtime":1732616396287,"results":"114","hashOfConfig":"93"},{"size":344,"mtime":1732616396287,"results":"115","hashOfConfig":"93"},{"size":746,"mtime":1732616396287,"results":"116","hashOfConfig":"93"},{"size":1865,"mtime":1732616396287,"results":"117","hashOfConfig":"93"},{"size":1877,"mtime":1732616396287,"results":"118","hashOfConfig":"93"},{"size":491,"mtime":1732616396287,"results":"119","hashOfConfig":"93"},{"size":4787,"mtime":1732616396283,"results":"120","hashOfConfig":"93"},{"size":3918,"mtime":1732616396283,"results":"121","hashOfConfig":"93"},{"size":2645,"mtime":1732616396283,"results":"122","hashOfConfig":"93"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hp2n6",{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vx2dfv",{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/index.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/reportWebVitals.ts",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/App.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/theme.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/Layout.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/authProvider.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/i18n/it.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/i18n/en.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/views/calendar.tsx",["249","250","251","252","253"],"import * as React from \"react\";\nimport { EventChangeArg, EventContentArg, EventInput } from '@fullcalendar/core';\nimport dayGrid from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\nimport timeGrid from '@fullcalendar/timegrid'; // a plugin!\nimport AddIcon from '@mui/icons-material/Add';\nimport { Box, Button, Card, CardContent, Checkbox, DialogActions, DialogContent, DialogTitle, FormControl, FormControlLabel, Grid, IconButton, Popover, Radio, RadioGroup, Theme, useMediaQuery } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport Fab from '@mui/material/Fab';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport moment from 'moment';\nimport { useEffect, useRef, useState } from 'react';\nimport { Loading, useCreate, useDelete, useGetList, useLocaleState, useNotify, useTranslate, useUpdate } from 'react-admin';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { EventPopup } from '../components/EventPopup';\nimport { dataProvider } from '../dataProvider';\nimport { textColorOnHEXBg } from '../utils/Utilities';\n\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport EventRoundedIcon from '@mui/icons-material/EventRounded';\nimport QueryBuilderRoundedIcon from '@mui/icons-material/QueryBuilderRounded';\nimport RepeatRoundedIcon from '@mui/icons-material/RepeatRounded';\nimport SquareRoundedIcon from '@mui/icons-material/SquareRounded';\n\n\nexport default function CalendarView() {\n\tconst isSmall = useMediaQuery<Theme>(theme => theme.breakpoints.down('md'));\n    const translate = useTranslate();\n\tconst [locale] = useLocaleState();\n\tconst calendarRef = useRef<FullCalendar>(null);\n\tconst [create] = useCreate();\n\tconst [update] = useUpdate();\n\tconst [_delete] = useDelete();\n\tconst notify = useNotify();\n\tconst [calendarValue, setCalendarValue] = useState(new Date());\n\tconst [recurrAction, setRecurrAction] = useState(\"0\")\n\tconst [dialog, setDialog] = useState<any>({\n\t\topen: false,\n\t\trecord: undefined\n\t});\n\tconst [editDialog, setEditDialog] = useState<any>({\n\t\topen: false,\n\t\trecord: undefined\n\t});\n\tconst [recurrDialog, setRecurrDialog] = useState<any>({\n\t\tfcinfo: undefined, //fullcalendar event info\n\t\topen: false,\n\t\trecord: undefined,\n\t\tevent: undefined //edit or delete\n\t});\n\tconst [window, setWindow] = useState<any>({\n\t\tstart: null,\n\t\tend: null\n\t})\n\n\tconst [popover, setPopover] = useState<any>({\n\t\topen: false,\n\t\trecord: undefined,\n\t\tanchorEl: null\n\t})\n\n\tconst [unchecked, setUnchecked] = useState([] as number[]);\n\tconst [events, setEvents] = useState([] as EventInput[]);\n\n\tconst { data, isLoading, error } = useGetList(\n\t\t'employee', { \n            pagination: { page: 0, perPage: 0 }\n        }\n\t);\n\n\tconst flattenRecord = (event: EventInput) => {\n\t\tvar record = event,\n\t\t\textProps = record.extendedProps;\n\n\t\tdelete record[\"extendedProps\"];\n\t\tvar data = { ...record, ...extProps };\n\t\tdata.dtstart = data.start;\n\t\tdata.dtend = data.end;\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * \n\t * @param callback \n\t * @returns \n\t */\n\tconst reloadEvents = (callback?: () => void) => {\n\t\tif (!data || !window.start)\n\t\t\treturn;\n\n\t\tlet groups = data!.map(e => e.id);\n\t\tgroups = groups.filter(g => !unchecked.includes(g))\n\n\t\tlet params = {\n\t\t\t\"start\": window.start,\n\t\t\t\"end\": window.end,\n\t\t\t\"groups\": unchecked.length > 0 ? groups : null,\n\t\t\t\"detailed\": true\n\t\t};\n\n\t\tdataProvider.getTimelineData(params)\n\t\t\t.then((res) => {\n\t\t\t\tlet fetchedEvents = res.data?.map((e: EventInput) => {\n\t\t\t\t\te.start = new Date(e.dtstart);\n\t\t\t\t\te.end = new Date(e.dtend);\n\t\t\t\t\te.allDay = e.all_day;\n\t\t\t\t\te.textColor = textColorOnHEXBg(e.color);\n\t\t\t\t\te.original_start_date = new Date(e.dtstart).toISOString()\n\t\t\t\t\te.title = e.type == \"JOB\" ? e.title : e.type //TODO: translate this enum\n\t\t\t\t\t\n\t\t\t\t\treturn e;\n\t\t\t\t})\n\n\t\t\t\tsetEvents(fetchedEvents);\n\t\t\t\tif (callback)\n\t\t\t\t\tcallback()\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n\n\t/**\n\t * on window change load the events\n\t */\n\tuseEffect(() => {\n\t\treloadEvents()\n\t}, [window, data, unchecked])\n\n\tif (isLoading) { return <Loading />; }\n\tif (error) { return <p>ERROR</p>; }\n\n\tconst shallowRemoveEvent = (eventId: string) => {\n\t\tlet currEvents = events;\n\t\tcurrEvents = currEvents.filter(e => e.id != eventId);\n\n\t\tsetEvents(currEvents);\n\t}\n\n\tconst eventCreate = (data: any) => {\n\t\tdata.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\tdata.dtstamp = new Date().toISOString();\n\t\tdata.dtstart = new Date(data.dtstart).toISOString()\n\t\tdata.dtend = new Date(data.dtend).toISOString()\n\n\t\tcreate('event', { data }, {\n\t\t\tonError: (error) => {\n\t\t\t\tnotify(translate(\"ess.calendar.event.error_create\")) \n\t\t\t\tconsole.error(error)\n\t\t\t},\n\t\t\tonSettled: (data, error) => {\n\t\t\t\thandleClose();\n\t\t\t\treloadEvents(() => {\n\t\t\t\t\tnotify(translate(\"ess.calendar.event.success_create\")) \n\t\t\t\t})\n\t\t\t},\n\t\t});\n\t}\n\n\tconst eventEditSubmit = (info?: EventChangeArg) => {\n\t\tlet record = info && info.event ? flattenRecord(info.event.toJSON()) : info || editDialog.record;\n\t\trecord.dtstart = new Date(record.dtstart).toISOString()\n\t\trecord.dtend = new Date(record.dtend).toISOString()\n\t\t//record.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t//record.dtstamp = new Date().toISOString();\n\n\t\tif (record?.parent) {\n\t\t\tsetRecurrDialog({\n\t\t\t\topen: true,\n\t\t\t\trecord: record,\n\t\t\t\tfcinfo: info,\n\t\t\t\tevent: \"edit\"\n\t\t\t})\n\t\t} else {\n\t\t\tupdate('event', { id: record.id, data: record }, {\n\t\t\t\tonError: (error) => {\n\t\t\t\t\tnotify(translate(\"ess.calendar.event.error_update\")) \n\t\t\t\t\tconsole.error(error)\n\t\t\t\t},\n\t\t\t\tonSettled: (data, error) => {\n\t\t\t\t\tnotify(translate(\"ess.calendar.event.success_update\")) \n\t\t\t\t\tsetEditDialog({\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\trecord: null\n\t\t\t\t\t});\n\n\t\t\t\t\treloadEvents(() => {\n\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.success_create\")) \n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tconst eventRemove = () => {\n\t\tconst record = editDialog.record || popover.record;\n\t\t\n\t\tif (record?.parent) {\n\t\t\tsetRecurrDialog({\n\t\t\t\topen: true,\n\t\t\t\trecord: record,\n\t\t\t\tfcinfo: undefined,\n\t\t\t\tevent: \"delete\"\n\t\t\t})\n\t\t} else {\n\t\t\t_delete('event', { id: record.id, previousData: record }, {\n\t\t\t\tonError: (error) => {\n\t\t\t\t\tnotify(translate(\"ess.calendar.event.error_delete\"))\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t},\n\t\t\t\tonSettled: (data, error) => {\n\t\t\t\t\tnotify(translate(\"ess.calendar.event.success_delete\"))\n\t\t\t\t\tsetPopover({\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\trecord: null,\n\t\t\t\t\t\tanchorEl: null\n\t\t\t\t\t});\n\t\t\t\t\tshallowRemoveEvent(record.id)\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tconst handleToggle = (value: number) => () => {\n\t\tconst currentIndex = unchecked.indexOf(value);\n\t\tconst newUnchecked = [...unchecked];\n\n\t\tif (currentIndex === -1) {\n\t\t\tnewUnchecked.push(value);\n\t\t} else {\n\t\t\tnewUnchecked.splice(currentIndex, 1);\n\t\t}\n\n\t\tsetUnchecked(newUnchecked);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetDialog({\n\t\t\topen: false,\n\t\t\trecord: {}\n\t\t})\n\t}\n\n\tconst handleOpen = (record: any = null) => {\n\t\tlet props: any = {\n\t\t\topen: true\n\t\t}\n\t\tif (record && record.id) {\n\t\t\tprops[\"record\"] = record;\n\t\t}\n\n\t\tsetDialog(props)\n\t}\n\n\tconst handleCloseRecurrEvt = () => {\n\t\tif (recurrDialog.fcinfo)\n\t\t\trecurrDialog.fcinfo.revert()\n\n\t\tsetRecurrDialog({\n\t\t\topen: false,\n\t\t\tfcinfo: undefined,\n\t\t\trecord: undefined,\n\t\t\tevent: undefined\n\t\t})\n\t}\n\n\tconst handleSubmitRecurrEvt = () => {\n\t\tvar data = recurrDialog.record,\n\t\t\taction = recurrAction,\n\t\t\tparent = data.parent,\n\t\t\tevent = recurrDialog.event;\n\n\t\tconst callback = () => {\n\t\t\treloadEvents(() => {\n\t\t\t\tnotify(translate(\"ess.calendar.event.success_update\"))\n\n\t\t\t\tsetRecurrAction(\"0\")\n\t\t\t\tsetPopover({\n\t\t\t\t\topen: false,\n\t\t\t\t\trecord: null,\n\t\t\t\t\tanchorEl: null\n\t\t\t\t});\n\t\t\t\tsetEditDialog({\n\t\t\t\t\topen: false,\n\t\t\t\t\trecord: null\n\t\t\t\t});\n\t\t\t\tsetRecurrDialog({\n\t\t\t\t\topen: false,\n\t\t\t\t\tfcinfo: undefined,\n\t\t\t\t\trecord: undefined,\n\t\t\t\t\tevent: undefined\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tswitch (action) {\n\t\t\tcase \"0\": //this event only\n\t\t\t\tdelete data[\"id\"];\n\n\t\t\t\tvar ex_dates = parent.ex_dates;\n\t\t\t\tparent.ex_dates = [ex_dates, data.original_start_date].filter(Boolean).join(\",\");\n\n\t\t\t\tdelete data[\"original_start_date\"]\n\t\t\t\tdata.recurring = false;\n\n\t\t\t\tupdate('event', { id: parent.id, data: parent }, {\n\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.error\"))\n\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t},\n\t\t\t\t\tonSettled: (d, error) => {\n\t\t\t\t\t\tif (event == \"edit\") {\n\t\t\t\t\t\t\tcreate('event', { data: data }, {\n\t\t\t\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.error\"))\n\t\t\t\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonSettled: (d, error) => {\n\t\t\t\t\t\t\t\t\tcallback()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\n\t\t\t\tbreak;\n\t\t\tcase \"1\": //this and following events\n\t\t\t\tdelete data[\"id\"];\n\n\t\t\t\tparent.until_type = 1;\n\t\t\t\tparent.until_date = data.original_start_date;\n\n\t\t\t\tdelete data[\"parent\"]\n\t\t\t\tdelete data[\"original_start_date\"]\n\n\t\t\t\tupdate('event', { id: parent.id, data: parent }, {\n\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.error\"))\n\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t},\n\t\t\t\t\tonSettled: (oldevt, error) => {\n\t\t\t\t\t\tif (event == \"edit\") {\n\t\t\t\t\t\t\tcreate('event', { data: data }, {\n\t\t\t\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.error\"))\n\t\t\t\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonSettled: (data, error) => {\n\t\t\t\t\t\t\t\t\tcallback()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"2\": //all events\n\t\t\t\tdata.id = parent.id;\n\n\t\t\t\tdelete data[\"parent\"]\n\t\t\t\tdelete data[\"original_start_date\"]\n\n\t\t\t\t_delete('event', { id: data.id, previousData: parent }, {\n\t\t\t\t\tonError: (error) => {\n\t\t\t\t\t\tnotify(translate(\"ess.calendar.event.error\"))\n\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t},\n\t\t\t\t\tonSettled: (data, error) => {\n\t\t\t\t\t\tcallback()\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t//unhandled action\t\t\t\n\t\t}\n\t}\n\n\treturn (\n\t\t<div id=\"calendar-container\" style={{\n\t\t\tmargin: \"30px 0\"\n\t\t}}>\n\t\t\t<Box display=\"flex\">\n\t\t\t\t{\n\t\t\t\t\t/**\n\t\t\t\t\t * Left component\n\t\t\t\t\t */\n\t\t\t\t}\n\t\t\t\t<Box\n\t\t\t\t\tsx={{\n\t\t\t\t\t\tdisplay: { xs: 'none', md: 'block' },\n\t\t\t\t\t\torder: -1,\n\t\t\t\t\t\twidth: '17em',\n\t\t\t\t\t\tmr: 2,\n\t\t\t\t\t\talignSelf: 'flex-start',\n\t\t\t\t\t\theight: \"85vh\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Card\n\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\toverflowY: \"auto\",\n\t\t\t\t\t\t\theight: \"85vh\",\n\t\t\t\t\t\t\tmarginTop: \"10px\"\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CardContent sx={{ pt: 1 }}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Small calendar component\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\tshowFixedNumberOfWeeks={true}\n\t\t\t\t\t\t\t\t//onChange={setCalendarValue} \n\t\t\t\t\t\t\t\tvalue={calendarValue}\n\t\t\t\t\t\t\t\tformatShortWeekday={(locale, date) => date.toLocaleDateString(locale, { weekday: 'narrow' })}\n\t\t\t\t\t\t\t\tlocale={locale}\n\t\t\t\t\t\t\t\tnavigationLabel={({ date, label, locale, view }) => label}\n\t\t\t\t\t\t\t\tnext2Label={null}\n\t\t\t\t\t\t\t\tprev2Label={null}\n\t\t\t\t\t\t\t\tonClickDay={(value) => {\n\t\t\t\t\t\t\t\t\tlet calendar = calendarRef.current;\n\t\t\t\t\t\t\t\t\tcalendar?.getApi().gotoDate(value)\n\t\t\t\t\t\t\t\t\tsetCalendarValue(value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Employee list\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<h4 style={{\n\t\t\t\t\t\t\t\tmarginBottom: \"0\",\n\t\t\t\t\t\t\t\tpadding: \"0 6px\",\n\t\t\t\t\t\t\t\tmarginTop: \"25px\"\n\t\t\t\t\t\t\t}}>Calendars</h4>\n\t\t\t\t\t\t\t<nav aria-label=\"main\">\n\t\t\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t\t\t{data!.map(record => {\n\t\t\t\t\t\t\t\t\t\tconst labelId = `checkbox-list-label-${record.id}`;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<ListItem disablePadding key={record.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItemButton role={undefined} onClick={handleToggle(record.id)} dense>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemIcon style={{minWidth: '40px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={unchecked.indexOf(record.id) === -1}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisableRipple\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: record.color,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={labelId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprimary={record.fullname}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondaryTypographyProps={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: 200,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: \"12px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondary={translate(\"ess.calendar.calendarlist.number\") + \": \" + record.number} />\n\t\t\t\t\t\t\t\t\t\t\t\t</ListItemButton>\n\t\t\t\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</Box>\n\t\t\t\t{\n\t\t\t\t\t/**\n\t\t\t\t\t * Fullcalendar/Main component\n\t\t\t\t\t */\n\t\t\t\t}\n\t\t\t\t<Box width={isSmall ? 'auto' : 'calc(100% - 18em)'} height=\"85vh\">\n\t\t\t\t\t<FullCalendar\n\t\t\t\t\t\tref={calendarRef}\n\t\t\t\t\t\t//timeZone={'UTC'}\n\t\t\t\t\t\tlocale={locale}\n\t\t\t\t\t\theight=\"100%\"\n\t\t\t\t\t\tselectable={true}\n\t\t\t\t\t\tslotMinTime=\"05:00:00\"\n\t\t\t\t\t\tslotMaxTime=\"22:00:00\"\n\t\t\t\t\t\tplugins={[timeGrid, dayGrid, interactionPlugin]}\n\t\t\t\t\t\theaderToolbar={{\n\t\t\t\t\t\t\tleft: 'today title',\n\t\t\t\t\t\t\tcenter: '',\n\t\t\t\t\t\t\tright: 'prev,next'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttitleFormat={{ year: 'numeric', month: 'long' }}\n\t\t\t\t\t\teventMaxStack={5}\n\t\t\t\t\t\tinitialView=\"timeGridWeek\"\n\t\t\t\t\t\tselect={(info) => {\n\t\t\t\t\t\t\tsetDialog({\n\t\t\t\t\t\t\t\topen: true,\n\t\t\t\t\t\t\t\trecord: {\n\t\t\t\t\t\t\t\t\tdtstart: info.startStr,\n\t\t\t\t\t\t\t\t\tdtend: info.endStr,\n\t\t\t\t\t\t\t\t\tall_day: info.allDay || false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teventContent={(eventContent: EventContentArg) => {\n\t\t\t\t\t\t\tif (eventContent.timeText)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{eventContent.event.title}<br />\n\t\t\t\t\t\t\t\t\t\t<i>{eventContent.timeText} </i>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<i>{eventContent.event.title}</i>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\teventClick={(info) => {\n\t\t\t\t\t\t\tconst item = info.event.toJSON();\n\n\t\t\t\t\t\t\tsetPopover({\n\t\t\t\t\t\t\t\topen: true,\n\t\t\t\t\t\t\t\tanchorEl: info.el,\n\t\t\t\t\t\t\t\trecord: flattenRecord(item)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teventChange={(info) => {\n\t\t\t\t\t\t\teventEditSubmit(info)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teditable={true}\n\t\t\t\t\t\tevents={events}\n\t\t\t\t\t\tdatesSet={(dateInfo) => {\n\t\t\t\t\t\t\tsetWindow({\n\t\t\t\t\t\t\t\tstart: dateInfo.start.toISOString(),\n\t\t\t\t\t\t\t\tend: dateInfo.end.toISOString()\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\tif (dateInfo.start > calendarValue || dateInfo.end < calendarValue)\n\t\t\t\t\t\t\t\tsetCalendarValue(moment(dateInfo.start).add(moment(calendarValue).weekday(), 'd').toDate());\n\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * Dialog (popup) opened on \"add button\"\n\t\t\t\t * or on \"select\" calendar event\n\t\t\t\t */\n\t\t\t}\n\t\t\t<Dialog\n\t\t\t\topen={dialog.open}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t<DialogTitle>New event</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<EventPopup\n\t\t\t\t\t\t{...dialog}\n\t\t\t\t\t\tsanitizeEmptyValues\n\t\t\t\t\t\tresource=\"event\"\n\t\t\t\t\t\tonSubmit={eventCreate}>\n\t\t\t\t\t</EventPopup>\n\t\t\t\t</DialogContent>\n\t\t\t</Dialog>\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * Dialog (popup) opened on \"recurring event\" change\n\t\t\t\t * useful to choose what to do on the recurring timeline\n\t\t\t\t */\n\t\t\t}\n\t\t\t<Dialog open={recurrDialog.open}>\n\t\t\t\t<DialogTitle>Edit recurring event</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\taria-labelledby=\"demo-radio-buttons-group-label\"\n\t\t\t\t\t\t\tdefaultValue=\"0\"\n\t\t\t\t\t\t\tname=\"radio-buttons-group\"\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tsetRecurrAction(e.target.value)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FormControlLabel value=\"0\" control={<Radio />} label={translate(\"ess.calendar.event.recurring.thisev\")} />\n\t\t\t\t\t\t\t<FormControlLabel value=\"1\" control={<Radio />} label={translate(\"ess.calendar.event.recurring.thisandfoll\")} />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//disabled because it is tricky to handle\n\t\t\t\t\t\t\t\t//<FormControlLabel value=\"2\" control={<Radio />} label=\"All events\" />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleCloseRecurrEvt}>Cancel</Button>\n\t\t\t\t\t<Button onClick={handleSubmitRecurrEvt}>OK</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * Add button\n\t\t\t\t */\n\t\t\t}\n\t\t\t<Fab color=\"primary\" aria-label=\"add\" style={{\n\t\t\t\tright: 20,\n\t\t\t\tposition: 'fixed',\n\t\t\t\tbottom: 10\n\t\t\t}} onClick={handleOpen}>\n\t\t\t\t<AddIcon />\n\t\t\t</Fab>\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * Popover attached to the event on event click\n\t\t\t\t */\n\t\t\t}\n\t\t\t<Dialog\n\t\t\t\topen={editDialog.open}\n\t\t\t\tonClose={() => {\n\t\t\t\t\tsetEditDialog({\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\trecord: null,\n\t\t\t\t\t\tanchorEl: null\n\t\t\t\t\t});\n\t\t\t\t}}>\n\t\t\t\t<DialogTitle>Edit event</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<EventPopup\n\t\t\t\t\t\tsanitizeEmptyValues\n\t\t\t\t\t\trecord={editDialog.record}\n\t\t\t\t\t\tresource=\"event\"\n\t\t\t\t\t\tonSubmit={eventEditSubmit}\n\t\t\t\t\t\tonRemoveClick={eventRemove}>\n\t\t\t\t\t</EventPopup>\n\t\t\t\t</DialogContent>\n\t\t\t</Dialog>\n\n\t\t\t<Popover\n\t\t\t\topen={popover.open}\n\t\t\t\tanchorEl={popover.anchorEl}\n\t\t\t\tonClose={() => {\n\t\t\t\t\tsetPopover({\n\t\t\t\t\t\topen: false,\n\t\t\t\t\t\trecord: null,\n\t\t\t\t\t\tanchorEl: null\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tPaperProps={{\n\t\t\t\t\tstyle: { width: '300px' },\n\t\t\t\t}}\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\tvertical: 'center',\n\t\t\t\t\thorizontal: 'left',\n\t\t\t\t}}\n\t\t\t\ttransformOrigin={{\n\t\t\t\t\tvertical: 'center',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box sx={{ m: 0.5 }}>\n\t\t\t\t\t<Grid container justifyContent=\"flex-end\">\n\t\t\t\t\t\t<IconButton onClick={() => {\n\t\t\t\t\t\t\tsetEditDialog({\n\t\t\t\t\t\t\t\topen: true,\n\t\t\t\t\t\t\t\trecord: popover.record\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetPopover({\n\t\t\t\t\t\t\t\topen: false,\n\t\t\t\t\t\t\t\trecord: null,\n\t\t\t\t\t\t\t\tanchorEl: null\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<IconButton onClick={eventRemove}>\n\t\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<IconButton onClick={() => {\n\t\t\t\t\t\t\tsetPopover({\n\t\t\t\t\t\t\t\topen: false,\n\t\t\t\t\t\t\t\trecord: null,\n\t\t\t\t\t\t\t\tanchorEl: null\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid container justifyContent=\"flex-start\">\n\t\t\t\t\t\t<List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n\t\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t\t<ListItemIcon style={{minWidth: '40px'}}>\n\t\t\t\t\t\t\t\t\t<SquareRoundedIcon style={{ color: popover.record?.backgroundColor }} />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText primary={popover.record?.employee_fullname} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t\t<ListItemIcon style={{minWidth: '40px'}}>\n\t\t\t\t\t\t\t\t\t<EventRoundedIcon />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText primary={popover.record?.title} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t\t<ListItemIcon style={{minWidth: '40px'}}>\n\t\t\t\t\t\t\t\t\t<QueryBuilderRoundedIcon />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\t\t\tprimary={new Date(popover.record?.dtstart).toLocaleString()}\n\t\t\t\t\t\t\t\t\tsecondary={new Date(popover.record?.dtend).toLocaleString()} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<ListItem style={{\n\t\t\t\t\t\t\t\tdisplay: popover.record?._rrule == null ? \"none\" : \"default\"\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<ListItemIcon style={{minWidth: '40px'}}>\n\t\t\t\t\t\t\t\t\t<RepeatRoundedIcon />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\t\t\tprimary={popover.record?._rrule?.toText()} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Box>\n\t\t\t</Popover>\n\t\t</div >\n\t)\n}\n","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/views/eventsummary.tsx",["254","255"],"import * as React from \"react\";\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport SettingsSuggestIcon from '@mui/icons-material/SettingsSuggest';\nimport { Box, Card, CardContent, Grid, IconButton, Skeleton } from '@mui/material';\nimport { useState } from 'react';\nimport { AutocompleteArrayInput, DateTimeInput, FormDataConsumer, ReferenceArrayInput, SaveButton, SimpleForm, Toolbar, required, useLocaleState } from 'react-admin';\n\nexport default function EmployeeSummaryList() {\n    // State variable to store the source URL of the PDF file\n    const [pdfSource, setPdfSource] = useState('');\n    const [locale, setLocale] = useLocaleState();\n\n    return (\n        <div>\n            <Grid container spacing={2}>\n                <Grid item xs={4}>\n                <Card\n\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\toverflowY: \"auto\",\n\t\t\t\t\t\t\theight: \"85vh\",\n\t\t\t\t\t\t\tmarginTop: \"10px\"\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CardContent sx={{ pt: 1 }}>\n                            <SimpleForm\n                                onSubmit={(data) => {\n                                    let url = `../api/event/print?locale=${locale}&start=${data.start.toISOString()}&end=${data.end.toISOString()}`;\n                                    if (data.employee && data.employee[0]) {\n                                        url += `&employees=${data.employee.join(\",\")}`\n                                    }\n                                    setPdfSource(url)\n                                }}\n                                toolbar={<Toolbar>\n                                    <SaveButton label={\"Generate\"} icon={<SettingsSuggestIcon />} />\n                                    <IconButton sx={{ marginLeft: \"auto\" }} aria-label=\"delete\" onClick={() => {\n                                        //debugger;\n                                    }}>\n                                        <RestartAltIcon />\n                                    </IconButton>\n                                </Toolbar>}>\n\n                                <FormDataConsumer>\n                                {({ formData, ...rest }) => \n                                <Box sx={{ flexGrow: 1 }}>\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={12}>\n                                            <DateTimeInput source=\"start\" alwaysOn fullWidth validate={required()}/>\n                                        </Grid> \n                                        <Grid item xs={12}>\n                                            <DateTimeInput source=\"end\" alwaysOn fullWidth validate={required()}/>\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                                <ReferenceArrayInput source=\"employee\" reference=\"employee\" label=\"Employee\" >\n                                                    <AutocompleteArrayInput optionText=\"fullname\" filterToQuery={string => ({ fullname: {ilike: `${string}`}} )}/>\n                                                </ReferenceArrayInput>\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                            }\n                            </FormDataConsumer>\n                            \n                            </SimpleForm>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n                </Grid>\n                <Grid item xs={8} marginTop={\"10px\"}>\n                    {pdfSource && <iframe \n                        src={pdfSource} \n                        width=\"100%\" height=\"100%\" />}\n                    {!pdfSource && <Skeleton variant=\"rounded\" width=\"100%\" height=\"100%\" />}\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/dataProvider/index.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/index.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/index.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/index.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/Header.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/utils/Utilities.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/EventPopup.tsx",["256"],"import React from 'react';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Box, Grid, IconButton } from '@mui/material';\nimport { AutocompleteInput, BooleanInput, DateTimeInput, FormDataConsumer, ReferenceInput, SaveButton, SelectInput, SimpleForm, Toolbar, required, useDelete } from \"react-admin\";\nimport { eventTypeEnum } from '../utils/Utilities';\nimport RruleInput from './RruleInput';\n\nconst PostCreateToolbar = (props:any) => {\n    return (\n        <Toolbar>\n            <SaveButton\n                label=\"Save\"\n            />\n            <IconButton sx={{ marginLeft: \"auto\" }} aria-label=\"delete\" onClick={() => {\n                props.onRemoveClick()\n            }}>\n                <DeleteIcon />\n            </IconButton>\n        </Toolbar>\n    );\n};\n\nexport const EventPopup = (props: any) => {\n    const { onRemoveClick, ...sfProps } = props;\n\n    return (\n        <SimpleForm\n            {...sfProps}\n            toolbar={<PostCreateToolbar onRemoveClick={onRemoveClick}></PostCreateToolbar>}>\n\n            <FormDataConsumer>\n            {({ formData, ...rest }) => \n            <Box sx={{ flexGrow: 1 }}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <BooleanInput source=\"all_day\" label=\"Tutto il giorno\" />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <DateTimeInput fullWidth source=\"dtstart\" label=\"Data inizio\" validate={required()} />\n                    </Grid>\n                    {/*<Grid item xs={3}>\n                        {!formData.all_day && <TimeInput fullWidth source=\"start_time\" label=\"Ora inizio\" validate={required()} />}\n                    </Grid>*/}\n                    <Grid item xs={6}>\n                        <DateTimeInput fullWidth source=\"dtend\" label=\"Data fine\" validate={required()} />\n                    </Grid>\n                    {/*<Grid item xs={3}>\n                        {!formData.all_day && <TimeInput fullWidth source=\"end_time\" label=\"Ora fine\" validate={required()} />}\n                    </Grid>*/}\n                    <Grid item xs={4}>\n                        <SelectInput source=\"type\" validate={required()} choices={\n                            Object.entries(eventTypeEnum).map(([id, name]) => ({id,name}))\n                        } />\n                    </Grid>\n                    <Grid item xs={4}>\n                            <ReferenceInput source=\"employee\" reference=\"employee\" label=\"Employee\" >\n                                <AutocompleteInput optionText=\"fullname\" validate={required()} filterToQuery={string => ({ fullname: {ilike: `${string}`}} )}/>\n                            </ReferenceInput>\n                    </Grid>\n                    <Grid item xs={4}>\n                        {formData.type === \"JOB\" && \n                            <ReferenceInput \n                            source=\"customer\" \n                            reference=\"customer\"  \n                            label=\"Customer\">\n                                <AutocompleteInput optionText=\"name\" validate={required()} filterToQuery={string => ({ name: {ilike: `${string}`}} )}/>\n                            </ReferenceInput>\n                        }\n                    </Grid>\n                </Grid>\n                <RruleInput source=\"rrule\" />\n            </Box>\n        }\n        </FormDataConsumer>\n        </SimpleForm>\n    )\n}\n","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/dataProvider/dataProvider.tsx",["257","258"],"import { stringify } from 'query-string';\nimport { fetchUtils, DataProvider } from 'ra-core';\n\n/**\n * Maps react-admin queries to a simple REST API\n *\n * This REST dialect is similar to the one of FakeRest\n *\n * @see https://github.com/marmelab/FakeRest\n *\n * @example\n *\n * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * getOne      => GET http://my.api.url/posts/123\n * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}\n * update      => PUT http://my.api.url/posts/123\n * create      => POST http://my.api.url/posts\n * delete      => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import simpleRestProvider from 'ra-data-simple-rest';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\nexport default (\n    apiUrl: string,\n    httpClient = fetchUtils.fetchJson,\n    countHeader: string = 'Content-Range'\n): DataProvider => ({\n    getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        \n        const filter = params.filter;\n        \n        let query:any = {\n            sortBy: field,\n            sortDir: order,\n            page: (page - 1),\n            limit: perPage\n        };\n\n        if (Object.keys(filter).length > 0)\n            query[\"filters\"] = filter\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filters: {\n                \"id\": {\n                    \"in\": params.ids\n                }\n            }\n        };\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        \n        const filter = params.filter;\n        \n        let query:any = {\n            sortBy: field,\n            sortDir: order,\n            page: (page - 1),\n            limit: perPage\n        };\n\n        if (Object.keys(filter).length > 0)\n            query[\"filters\"] = filter\n\n        return httpClient(`${apiUrl}/${resource}/list`, {\n            method: 'POST',\n            body: JSON.stringify(query),\n        }).then(({ headers, json }) => {            \n            return {\n                data: json.data,\n                total: json.count\n            };\n        });\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify({...params.data, id: params.id}),\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n    updateMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'PUT',\n                    body: JSON.stringify({...params.data, id: id}),\n                })\n            )\n        ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'text/plain',\n            }),\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    deleteMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'DELETE',\n                    headers: new Headers({\n                        'Content-Type': 'text/plain',\n                    }),\n                })\n            )\n        ).then(responses => ({\n            data: responses.map(({ json }) => json.id),\n        })),\n});","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeEdit.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeList.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/employees/EmployeeCreate.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerList.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerCreate.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserList.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserCreate.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/users/UserEdit.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/customers/CustomerEdit.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/RruleInput.tsx",["259","260"],"import { Grid } from '@mui/material';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { BooleanInput, DateInput, FormDataConsumer, NumberInput, RadioButtonGroupInput, SelectArrayInput, SelectInput, required } from 'react-admin';\n\ninterface RruleInputProps {\n  source: string;\n}\n\n/**\n * common: \n * - repeat every X (num) day/week/month/year (select)\n * - end: never/date/after X occurrences (radio)\n * \n * week:\n * - repeat on jan/feb/mar/... (multiple, default current day of week selected)\n * \n * month:\n * - every month the day X/every month the first/second/... (preset) X (preset)\n * \n * \n * @param param0 \n * @returns \n */\nconst RruleInput: React.FC<RruleInputProps> = ({ source }) => (\n  <FormDataConsumer>\n    {({ formData, scopedFormData, getSource }) => {\n      return (\n        <>\n        <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <BooleanInput source={\"recurring\"} label={formData.recurring ? \"Ripeti ogni\" : \"Ripeti\"} />\n            </Grid>\n            {formData.recurring && \n              <>\n              <Grid item xs={4}>\n                  <NumberInput source={\"interval\"} validate={required()} defaultValue={1} label=\"Intervallo\" />\n              </Grid>\n              <Grid item xs={4}>\n                <SelectInput\n                  source={`frequency`}\n                  style={{\n                    marginTop: \"0\"\n                  }}\n                  validate={required()}\n                  label=\"Frequenza\"\n                  defaultValue={2}\n                  choices={[\n                    { id: 3, name: 'Days' },\n                    { id: 2, name: 'Weeks' },\n                    { id: 1, name: 'Months' },\n                    { id: 0, name: 'Years' },\n                  ]}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                {formData.freq === 2 ? <SelectArrayInput\n                  fullWidth\n                  label=\"Si ripete il\"\n                  source={`byweekday`}\n                  defaultValue={() => {\n                    return formData.dtstart ?  (new Date(formData.dtstart)).getUTCDay() % 7 : null\n                  }}\n                  choices={[\n                    { id: 0, name: 'Domenica' },\n                    { id: 1, name: 'Lunedì' },\n                    { id: 2, name: 'Martedì' },\n                    { id: 3, name: 'Mercoledì' },\n                    { id: 4, name: 'Giovedì' },\n                    { id: 5, name: 'Venerdì' },\n                    { id: 6, name: 'Sabato' },\n                  ]}\n                /> : null }\n                <RadioButtonGroupInput source=\"until_type\" label={\"Fine:\"} sx={{\n                    '&': {width: \"100%\"},\n                    '& .MuiFormControlLabel-label': {width: \"100%\"}\n                  }} row={false} defaultValue={0}\n                  choices={[\n                      { id: 0},\n                      { id: 1},\n                      { id: 2},\n                  ]} optionText={(choice) => {\n                    switch(choice.id) {\n                      case 1: //date\n                        return (\n                          <Grid container spacing={2}  alignItems=\"center\" >\n                            <Grid item xs={4}>\n                              {\"Data:\"}\n                            </Grid>\n                            <Grid item xs={8}>\n                               {formData.until_type == 1 ? <DateInput fullWidth source={\"until_date\"} validate={required()}  /> : \"\" }\n                            </Grid>\n                          </Grid>\n                          )\n                      case 2: //occurrences\n                        return (\n                          <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={4}>\n                              {\"Dopo:\"}\n                            </Grid>\n                            <Grid item xs={8}>\n                              {formData.until_type == 2 ? <NumberInput fullWidth source={\"until_occurrences\"} validate={required()}  defaultValue={1} /> : \"\"}\n                            </Grid>\n                          </Grid>\n                        )\n                      default:\n                        return (\n                          <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={12}>\n                              {\"Mai:\"}\n                            </Grid>\n                          </Grid>\n                        )\n                    }\n                  }} />\n                </Grid>\n                </>\n              }\n            </Grid>\n          </>\n        );\n      }}\n    </FormDataConsumer>\n  );\n  \n  RruleInput.propTypes = {\n    source: PropTypes.string.isRequired,\n  };\n  \n  export default RruleInput;\n\n  ","/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/ColorInput.tsx",[],"/home/agrima/Desktop/curr-projects/employee-shift-scheduler/webapp/src/main/frontend/src/components/PasswordUpdateBtn.tsx",["261","262","263"],"import CloseIcon from '@mui/icons-material/Close';\nimport LockResetIcon from '@mui/icons-material/LockReset';\nimport { Dialog, DialogContent, DialogTitle, IconButton } from '@mui/material';\nimport React, { useState } from 'react';\nimport { Button, RaRecord, SaveButton, SimpleForm, TextInput, Toolbar, required, useCreatePath, useNotify, useRecordContext, useResourceContext, useTranslate } from \"react-admin\";\nimport { dataProvider } from \"../dataProvider\";\n\nexport const PasswordUpdateBtn = <RecordType extends RaRecord = any>(\n    props: any\n) => {\n    const notify = useNotify();\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n\n    const {\n        icon = <LockResetIcon />,\n        label = translate(\"ess.users.password_update.btn_label\")\n    } = props;\n\n    // State to manage dialog open/close\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [newPassword, setNewPassword] = useState('');\n\n    if (!record) return null;\n\n    // Function to handle button click\n    const handleButtonClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        setIsDialogOpen(true); // Open the dialog\n    };\n\n    // Function to handle form submission\n    const handleFormSubmit = (e: any) => {\n        e.stopPropagation();\n\n        if (!newPassword)\n            return;\n\n        dataProvider.updatePassword({\n            user: record.id as number,\n            password: newPassword\n        })\n\t\t\t.then((res) => {\n                setIsDialogOpen(false)\n                notify(translate(\"ess.users.password_update.updated\")) \n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.error(err);\n                notify(translate(\"ess.users.password_update.updated_error\")) \n\t\t\t});\n    };\n\n    return (\n        <>\n            <Button\n                label={label}\n                onClick={handleButtonClick}\n            >\n                {icon}\n            </Button>\n\n            {/* Dialog for password update */}\n            <Dialog onClick={(e:any) => {\n                e.stopPropagation();\n            }} open={isDialogOpen} onClose={(e:any) => {\n                e.stopPropagation();\n\n                setIsDialogOpen(false)\n            }}>\n                <DialogTitle>{translate(\"ess.users.password_update.btn_label\")}</DialogTitle>\n                <DialogContent>\n\n                    <SimpleForm \n                    toolbar={\n                        <Toolbar>\n                            <SaveButton\n                                onClick={handleFormSubmit}\n                                label=\"Save\"\n                            />\n\n                            <IconButton sx={{ marginLeft: \"auto\" }} aria-label=\"cancel\" onClick={(e: any) => {\n                                e.stopPropagation();\n                                setIsDialogOpen(false)\n                            }}>\n                                <CloseIcon />\n                            </IconButton>\n                        </Toolbar>}\n                    >\n                    {/* Form for password update */}\n                        <TextInput \n                            source=\"username\"\n                            label=\"Username\"\n                            fullWidth\n                            defaultValue={record.username}\n                            disabled\n                        />\n                        <TextInput\n                            source=\"password\"\n                            label={translate(\"ess.users.password_update.field_label\")}\n                            type=\"password\"\n                            fullWidth\n                            value={newPassword}\n                            validate={required()}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                            autoFocus\n                        />\n                    </SimpleForm>\n                 </DialogContent>\n            </Dialog>\n        </>\n    );\n};\n","/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/index.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/reportWebVitals.ts",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/App.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/theme.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/authProvider.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/Layout.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/i18n/en.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/i18n/it.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/views/eventsummary.tsx",["264","265"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/views/calendar.tsx",["266","267","268","269","270"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/dataProvider/index.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/index.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/index.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/index.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/Header.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/utils/Utilities.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/EventPopup.tsx",["271"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/dataProvider/dataProvider.tsx",["272","273"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerList.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerCreate.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/customers/CustomerEdit.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserList.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserEdit.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeList.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeCreate.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/employees/EmployeeEdit.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/users/UserCreate.tsx",[],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/RruleInput.tsx",["274","275"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/PasswordUpdateBtn.tsx",["276","277","278"],"/home/agrima/Desktop/curr-projects/Shift-Smart/webapp/src/main/frontend/src/components/ColorInput.tsx",[],{"ruleId":"279","severity":1,"message":"280","line":118,"column":23,"nodeType":"281","messageId":"282","endLine":118,"endColumn":25},{"ruleId":"283","severity":1,"message":"284","line":137,"column":5,"nodeType":"285","endLine":137,"endColumn":30,"suggestions":"286"},{"ruleId":"279","severity":1,"message":"287","line":144,"column":44,"nodeType":"281","messageId":"282","endLine":144,"endColumn":46},{"ruleId":"279","severity":1,"message":"280","line":321,"column":17,"nodeType":"281","messageId":"282","endLine":321,"endColumn":19},{"ruleId":"279","severity":1,"message":"280","line":354,"column":17,"nodeType":"281","messageId":"282","endLine":354,"endColumn":19},{"ruleId":"288","severity":1,"message":"289","line":11,"column":20,"nodeType":"290","messageId":"291","endLine":11,"endColumn":29},{"ruleId":"292","severity":1,"message":"293","line":67,"column":35,"nodeType":"294","endLine":69,"endColumn":54},{"ruleId":"288","severity":1,"message":"295","line":4,"column":148,"nodeType":"290","messageId":"291","endLine":4,"endColumn":157},{"ruleId":"288","severity":1,"message":"296","line":1,"column":10,"nodeType":"290","messageId":"291","endLine":1,"endColumn":19},{"ruleId":"297","severity":1,"message":"298","line":36,"column":1,"nodeType":"299","endLine":165,"endColumn":4},{"ruleId":"279","severity":1,"message":"280","line":91,"column":53,"nodeType":"281","messageId":"282","endLine":91,"endColumn":55},{"ruleId":"279","severity":1,"message":"280","line":102,"column":52,"nodeType":"281","messageId":"282","endLine":102,"endColumn":54},{"ruleId":"288","severity":1,"message":"300","line":5,"column":82,"nodeType":"290","messageId":"291","endLine":5,"endColumn":95},{"ruleId":"288","severity":1,"message":"301","line":5,"column":126,"nodeType":"290","messageId":"291","endLine":5,"endColumn":144},{"ruleId":"288","severity":1,"message":"302","line":8,"column":35,"nodeType":"290","messageId":"291","endLine":8,"endColumn":45},{"ruleId":"288","severity":1,"message":"289","line":11,"column":20,"nodeType":"290","messageId":"291","endLine":11,"endColumn":29},{"ruleId":"292","severity":1,"message":"293","line":67,"column":35,"nodeType":"294","endLine":69,"endColumn":54},{"ruleId":"279","severity":1,"message":"280","line":118,"column":23,"nodeType":"281","messageId":"282","endLine":118,"endColumn":25},{"ruleId":"283","severity":1,"message":"284","line":137,"column":5,"nodeType":"285","endLine":137,"endColumn":30,"suggestions":"303"},{"ruleId":"279","severity":1,"message":"287","line":144,"column":44,"nodeType":"281","messageId":"282","endLine":144,"endColumn":46},{"ruleId":"279","severity":1,"message":"280","line":321,"column":17,"nodeType":"281","messageId":"282","endLine":321,"endColumn":19},{"ruleId":"279","severity":1,"message":"280","line":354,"column":17,"nodeType":"281","messageId":"282","endLine":354,"endColumn":19},{"ruleId":"288","severity":1,"message":"295","line":4,"column":148,"nodeType":"290","messageId":"291","endLine":4,"endColumn":157},{"ruleId":"288","severity":1,"message":"296","line":1,"column":10,"nodeType":"290","messageId":"291","endLine":1,"endColumn":19},{"ruleId":"297","severity":1,"message":"298","line":36,"column":1,"nodeType":"299","endLine":165,"endColumn":4},{"ruleId":"279","severity":1,"message":"280","line":91,"column":53,"nodeType":"281","messageId":"282","endLine":91,"endColumn":55},{"ruleId":"279","severity":1,"message":"280","line":102,"column":52,"nodeType":"281","messageId":"282","endLine":102,"endColumn":54},{"ruleId":"288","severity":1,"message":"300","line":5,"column":82,"nodeType":"290","messageId":"291","endLine":5,"endColumn":95},{"ruleId":"288","severity":1,"message":"301","line":5,"column":126,"nodeType":"290","messageId":"291","endLine":5,"endColumn":144},{"ruleId":"288","severity":1,"message":"302","line":8,"column":35,"nodeType":"290","messageId":"291","endLine":8,"endColumn":45},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'reloadEvents'. Either include it or remove the dependency array.","ArrayExpression",["304"],"Expected '!==' and instead saw '!='.","@typescript-eslint/no-unused-vars","'setLocale' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'useDelete' is defined but never used.","'stringify' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useCreatePath' is defined but never used.","'useResourceContext' is defined but never used.","'RecordType' is defined but never used.",["305"],{"desc":"306","fix":"307"},{"desc":"306","fix":"308"},"Update the dependencies array to be: [window, data, unchecked, reloadEvents]",{"range":"309","text":"310"},{"range":"311","text":"310"},[4379,4404],"[window, data, unchecked, reloadEvents]",[4379,4404]]